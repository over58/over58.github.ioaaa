<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yongchao&#39;s blog</title>
  
  <subtitle>A fast, simple &amp; powerful blog framework powered by Node.js.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yongchao.tech:8080/"/>
  <updated>2019-03-21T03:31:03.768Z</updated>
  <id>http://yongchao.tech:8080/</id>
  
  <author>
    <name>yongchao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue实现文件下载</title>
    <link href="http://yongchao.tech:8080/2019/03/21/vue%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
    <id>http://yongchao.tech:8080/2019/03/21/vue实现文件下载/</id>
    <published>2019-03-21T10:45:33.000Z</published>
    <updated>2019-03-21T03:31:03.768Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;url&quot; download=&quot;文件名.后缀名&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="实际使用场景"><a href="#实际使用场景" class="headerlink" title="实际使用场景"></a>实际使用场景</h3><p>上面的原理中适合开放的资源下载，http请求中无需验证时使用。在实际使用过程中，a标签中的url中直接设置header比较麻烦且不安全，<br>而且从开发规范上api一般上要封装一下（header中需要一些特定设置），放到统一的文件。</p><p>解决办法：下载相关和api responseType设置为blob(!!!重要)，在以blob形式获取到文件之后js创建一个a标签，设置url和downlaod后并触发，最后释放url资源并删除创建的a标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">api:</span><br><span class="line">downloadFile (url) =&gt; &#123;</span><br><span class="line">  axios.get(url, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    headers: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    // 重要</span><br><span class="line">    responseType: &apos;blob&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">html: </span><br><span class="line">&lt;button @click=&quot;download&quot;&gt;下载&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">js: </span><br><span class="line">  function downlaod (param)&#123;</span><br><span class="line">    api.downloadFile(param).then(data =&gt; &#123;</span><br><span class="line">      if (!data) &#123;</span><br><span class="line">        this.$Message.error(&apos;下载内容为空&apos;)</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line">      let url = window.URL.createObjectURL(new Blob([data]))</span><br><span class="line">      let link = document.createElement(&apos;a&apos;)</span><br><span class="line">      link.style.display = &apos;none&apos;</span><br><span class="line">      link.href = url</span><br><span class="line">      link.setAttribute(&apos;download&apos;, etcdCluster + &apos;.zip&apos;)</span><br><span class="line">        </span><br><span class="line">      document.body.appendChild(link)</span><br><span class="line">      link.click()</span><br><span class="line">      //释放URL对象所占资源</span><br><span class="line">      window.URL.revokeObjectURL(url)</span><br><span class="line">      //用完即删</span><br><span class="line">      document.body.removeChild(link)</span><br><span class="line">    &#125;).catch(err =&gt; &#123;</span><br><span class="line">      console.log(&apos;err: &apos;, err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="MDN相关链接"><a href="#MDN相关链接" class="headerlink" title="MDN相关链接"></a>MDN相关链接</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/revokeObjectURL" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/URL/revokeObjectURL</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yongchao.tech:8080/tags/vue/"/>
    
      <category term="js" scheme="http://yongchao.tech:8080/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js自定义modal框</title>
    <link href="http://yongchao.tech:8080/2019/03/18/js%E8%87%AA%E5%AE%9A%E4%B9%89modal%E6%A1%86/"/>
    <id>http://yongchao.tech:8080/2019/03/18/js自定义modal框/</id>
    <published>2019-03-17T20:55:41.000Z</published>
    <updated>2019-03-21T02:27:18.465Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>作为一个Web开发而言，modal模态框一定不会陌生。本文将简单的讲一下如何使用js自定义一个modal框，当然了，本文的重点并不是教你如何构建一个modal框，而是希望能够教你如何构建一个组件的思路。好了，废话不多说，正文开始。</p><h3 id="modal是什么，有什么功能"><a href="#modal是什么，有什么功能" class="headerlink" title="modal是什么，有什么功能"></a>modal是什么，有什么功能</h3><p>modal是位于用户主窗口之上的一个元素，当它打开的时候，主窗口无法操作，位于主窗口之上的modal框内可以操作。一个modal至少包含以下几个功能：</p><ol><li>模态框的蒙版 .modal-overlay</li><li>头部  .modal-header</li><li>主体 .modal-body</li><li>脚步 .modal-footer</li><li>关闭按钮 .modal-close</li></ol><blockquote><p>关闭按钮包括多种方式：取消按钮（footer中）、关闭按钮(右上角)、ESC按键、点击模态框主体外的蒙版的区域</p></blockquote><h3 id="构建插件"><a href="#构建插件" class="headerlink" title="构建插件"></a>构建插件</h3><p>1.首先选择iife。这里使用了闭包的知识，因为闭包可以创建一个私有域。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">  var 私有变量 = 值</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>2.设置选项（options）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 设置一个windo中可以访问的函数 --&gt;</span><br><span class="line">this.Modal = function() &#123;</span><br><span class="line">  this.modal = null; // 模态弹出框</span><br><span class="line">  this.overlay = null; //蒙板</span><br><span class="line">  this.closeButton = null; // 右上角关闭按钮</span><br><span class="line">  this.footerCloseButton = null //footer关闭按钮</span><br><span class="line">  this.options = &#123;</span><br><span class="line">    className: &apos;fade-and-drop&apos;,</span><br><span class="line">    content: &apos;这是一个自定义的模态框&apos;,</span><br><span class="line">    minHeight: &apos;300px&apos;,</span><br><span class="line">    maxHeight: &apos;600px&apos;,</span><br><span class="line">    closable: true, // 是否可关闭，决定着是否有关闭按钮</span><br><span class="line">    overlay: true</span><br><span class="line">  &#125;;</span><br><span class="line">  //  合并默认设置和用户自定义设置，用户自定义配置&gt;默认配置</span><br><span class="line">  if (arguments[0] &amp;&amp; typeof arguments[0] === &apos;object&apos;) &#123;</span><br><span class="line">    this.options = mergeOptions(this.options, arguments[0]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//合并对象属性的工具方法</span><br><span class="line">function mergeOptions(target, source) &#123;</span><br><span class="line">  for (let property in source) &#123;</span><br><span class="line">    if (source.hasOwnProperty(property)) &#123;</span><br><span class="line">      target[property] = source[property];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.　核心功能</p><p>现在我们对模态框的插件架构有了一定的了解，它包括了：构造函数、选项和公共方法。但它还不能做什么？接下来我们就要给他们添加相应的核心功能。所以我们再来看看，一个模态框应该做什么：</p><ul><li>构建一个模态元素并将其添加到页面中</li><li>将选项（options）中的className指定一个类名，并将其添加到模态元素中</li><li>如果选项中的closeButton为true，则添加关闭按钮</li><li>如果选项中的content是 HTML 字符串，则将其设置为模态元素中的内容</li><li>如果选项中的content是domNode，则将其内部内容设置为模态元素的内容</li><li>分别设置模态的maxWidth和minWidth</li><li>如果选项中的overlay为true，则给模态框添加一个蒙层</li><li>当模态框显示时，添加一个scotch-open类名，可以在 CSS 中使用它来定义一个open状态</li><li>当模态框关闭时，删除scotch-open类名</li><li>如果模态框的高度超过视窗的高度，还可以添加一个scotch-anchored类，这样就可以处理这个场景的样式展示</li></ul><h3 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">  //构造函数</span><br><span class="line">  this.Modal = function () &#123;</span><br><span class="line">    // 初始化默认option，　</span><br><span class="line">    this.options = &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    //合并用户自定义配置和默认配置，并赋值给options, 每个实例都可能不一样，所有不能放在prototype上，同时在其它函数中又要引用它，所有定义为公有属性</span><br><span class="line">    </span><br><span class="line">    this.options = mergeOptions(this.options, arguments[0])</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  // 打开Modal的方法,每个实例中的这个方法都是一样的,定义在prototype上</span><br><span class="line">  Modal.prototype.open = function()&#123;</span><br><span class="line"></span><br><span class="line">    // 初始化Dom</span><br><span class="line">    1.overlay蒙版元素</span><br><span class="line">    2.modal元素&#123;</span><br><span class="line">      close按钮</span><br><span class="line">      content</span><br><span class="line">      footer</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 初始化Event</span><br><span class="line">    包括：&#123;</span><br><span class="line">      close事件</span><br><span class="line">      transitionEnd事件(关闭按钮中Css使用了过渡动画，等过渡动画完成之后才能移除dom)，需要注意的就是不同的的浏览器中这个时间的名字可能不一样</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //关闭方法</span><br><span class="line">  Modal.prototype.close = function()&#123;</span><br><span class="line">    //移除Dom</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="完整的代码链接-https-codepen-io-xuyongchaos-pen-aMGXLy-editors-1010"><a href="#完整的代码链接-https-codepen-io-xuyongchaos-pen-aMGXLy-editors-1010" class="headerlink" title="!!!!完整的代码链接 https://codepen.io/xuyongchaos/pen/aMGXLy?editors=1010"></a>!!!!完整的代码链接 <a href="https://codepen.io/xuyongchaos/pen/aMGXLy?editors=1010" target="_blank" rel="noopener">https://codepen.io/xuyongchaos/pen/aMGXLy?editors=1010</a></h3><h3 id="使用到的东西"><a href="#使用到的东西" class="headerlink" title="使用到的东西"></a>使用到的东西</h3><ol><li>闭包</li><li>DocumentFragment</li><li>如何减少浏览器回流</li><li>DOM操作</li><li>DOM事件</li><li>this相关call, bind</li><li>css样式</li></ol><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>编写一个简单的插件需要的知识还是挺多的，没事的话可以自己编写一下，不仅锻炼了模块化编程思维，还可以对以前的知识进行查缺补漏。fighting!!!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;作为一个Web开发而言，modal模态框一定不会陌生。本文将简单的讲一下如何使用js自定义一个modal框，当然了，本文的重点并不是教你如何
      
    
    </summary>
    
    
      <category term="js" scheme="http://yongchao.tech:8080/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>自定义js模态框插件</title>
    <link href="http://yongchao.tech:8080/2019/03/18/%E8%87%AA%E5%AE%9A%E4%B9%89js%E6%A8%A1%E6%80%81%E6%A1%86%E6%8F%92%E4%BB%B6/"/>
    <id>http://yongchao.tech:8080/2019/03/18/自定义js模态框插件/</id>
    <published>2019-03-17T20:46:16.000Z</published>
    <updated>2019-03-17T12:48:05.837Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>作为一个web开发ren yuan er ye an</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;作为一个web开发ren yuan er ye an&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="js" scheme="http://yongchao.tech:8080/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>从js的属性描述符浦西vue.js的响应式视图</title>
    <link href="http://yongchao.tech:8080/2019/03/16/%E4%BB%8Ejs%E7%9A%84%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6%E6%B5%A6%E8%A5%BFvue-js%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E8%A7%86%E5%9B%BE/"/>
    <id>http://yongchao.tech:8080/2019/03/16/从js的属性描述符浦西vue-js的响应式视图/</id>
    <published>2019-03-15T19:57:05.000Z</published>
    <updated>2019-03-15T14:46:15.911Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>JavaScript 的对象，拥有任意数量的唯一键，键可以是字符串（String）类型或标记（Symbol，ES6 新增的基本数据类型）类型，每个键对应一个值，值可以是任意类型的任意值。对于对象内的属性，JavaScript 提供了一个属性描述器接口 PropertyDescriptor</p><h3 id="定义对象的属性"><a href="#定义对象的属性" class="headerlink" title="定义对象的属性"></a>定义对象的属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  name: &apos;Tom&apos;,</span><br><span class="line">  sex: &apos;man</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">var obj = &#123;&#125;</span><br><span class="line">obj.name = &apos;Tom&apos;</span><br></pre></td></tr></table></figure><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h3><p>上面使用的方式不能对属性描述符的操作，需要使用 Object.ddefineProperty(obj, prop, descriptor)</p><h4 id="当使用-defineProperty-方法操作属性的时候，描述符的默认值为："><a href="#当使用-defineProperty-方法操作属性的时候，描述符的默认值为：" class="headerlink" title="当使用 defineProperty()方法操作属性的时候，描述符的默认值为："></a>当使用 defineProperty()方法操作属性的时候，描述符的默认值为：</h4><ol><li>value: undefined</li><li>set: undefined</li><li>get: undefined</li><li>writable: false</li><li>enumerable: false</li><li>configable: false</li></ol><h4 id="不使用该方法定义属性，默认值为："><a href="#不使用该方法定义属性，默认值为：" class="headerlink" title="不使用该方法定义属性，默认值为："></a>不使用该方法定义属性，默认值为：</h4><ol><li>value: undefined</li><li>set: undefined</li><li>get: undefined</li><li>writable: true</li><li>enumerable: true</li><li>configable: true</li></ol><h4 id="还支持批量修改对象属性以及描述对象"><a href="#还支持批量修改对象属性以及描述对象" class="headerlink" title="还支持批量修改对象属性以及描述对象"></a>还支持批量修改对象属性以及描述对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperties(obj, &#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">    value: &apos;Tom&apos;,</span><br><span class="line">    configable: true</span><br><span class="line">  &#125;,</span><br><span class="line">  sex: &#123;</span><br><span class="line">    value: &apos;man&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="读取属性描述符对象-Object-getOwnPropertyDescriptor-obj-prop"><a href="#读取属性描述符对象-Object-getOwnPropertyDescriptor-obj-prop" class="headerlink" title="读取属性描述符对象 Object.getOwnPropertyDescriptor(obj,prop)"></a>读取属性描述符对象 Object.getOwnPropertyDescriptor(obj,prop)</h4><h3 id="属性描述符对象"><a href="#属性描述符对象" class="headerlink" title="属性描述符对象"></a>属性描述符对象</h3><h4 id="value-属性的值"><a href="#value-属性的值" class="headerlink" title="value 属性的值"></a>value 属性的值</h4><h4 id="存储器函数（setter-getter）"><a href="#存储器函数（setter-getter）" class="headerlink" title="存储器函数（setter/getter）"></a>存储器函数（setter/getter）</h4><p>1.get<br>2.set</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var x = &#123;&#125;</span><br><span class="line">Object.defineProperty(x, &apos;count&apos;, &#123;</span><br><span class="line">  get: funciton () &#123;</span><br><span class="line">    return this.value</span><br><span class="line">  &#125;,</span><br><span class="line">  set: function (val) &#123; </span><br><span class="line">    this.count = val</span><br><span class="line">  &#125; </span><br><span class="line">&#125;)</span><br><span class="line">console.log(x) </span><br><span class="line">x.count = 1 </span><br><span class="line">console.log(x.count)</span><br></pre></td></tr></table></figure><p>执行上面的代码，会发现报错，执行栈溢出。</p><blockquote><p>上述代码在执行set 函数中执行 count赋值操作的时候(this.count = val)，循环调用自己，形成了死循环。<br>更改为以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var x = &#123;&#125;</span><br><span class="line">Object.defineProperty(x, &apos;count&apos;, &#123;</span><br><span class="line">  get: () &#123;</span><br><span class="line">    return this._count</span><br><span class="line">  &#125;</span><br><span class="line">  set: function (val) &#123; </span><br><span class="line">     this._count = val </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(x) </span><br><span class="line">x.count = 1 </span><br><span class="line">console.log(x.count)</span><br></pre></td></tr></table></figure></p></blockquote><p>实际上，在使用 defineProperty()方法设置对象的属性的时候，通常需要在对象内部维护一个新的内部变量(以下划线_开头，表示为内部变量)</p><blockquote><p>注：当设置了存取器描述时，不能设置value 和writable, 可以当作没有这两个属性</p></blockquote><h4 id="writable-指定对象的value是否可以改变"><a href="#writable-指定对象的value是否可以改变" class="headerlink" title="writable 指定对象的value是否可以改变"></a>writable 指定对象的value是否可以改变</h4><h4 id="enumerable-指定对象中的某属性是否可以枚举，就是for-in-操作是否可以遍历出来"><a href="#enumerable-指定对象中的某属性是否可以枚举，就是for-in-操作是否可以遍历出来" class="headerlink" title="enumerable 指定对象中的某属性是否可以枚举，就是for in 操作是否可以遍历出来"></a>enumerable 指定对象中的某属性是否可以枚举，就是for in 操作是否可以遍历出来</h4><h4 id="configable-指定对象属性的描述符是否可以改变"><a href="#configable-指定对象属性的描述符是否可以改变" class="headerlink" title="configable 指定对象属性的描述符是否可以改变"></a>configable 指定对象属性的描述符是否可以改变</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;JavaScript 的对象，拥有任意数量的唯一键，键可以是字符串（String）类型或标记（Symbol，ES6 新增的基本数据类型）类型，每个键对应一个值，值可以是任意类型的任意值。对于对象内的属性，JavaScript 提供了一个属性描述器接口 PropertyDescriptor&lt;/p&gt;
&lt;h3 id=&quot;定义对象的属性&quot;&gt;&lt;a href=&quot;#定义对象的属性&quot; class=&quot;headerlink&quot; title=&quot;定义对象的属性&quot;&gt;&lt;/a&gt;定义对象的属性&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name: &amp;apos;Tom&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sex: &amp;apos;man&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;or&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var obj = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.name = &amp;apos;Tom&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Object-defineProperty&quot;&gt;&lt;a href=&quot;#Object-defineProperty&quot; class=&quot;headerlink&quot; title=&quot;Object.defineProperty()&quot;&gt;&lt;/a&gt;Object.defineProperty()&lt;/h3&gt;&lt;p&gt;上面使用的方式不能对属性描述符的操作，需要使用 Object.ddefineProperty(obj, prop, descriptor)&lt;/p&gt;
&lt;h4 id=&quot;当使用-defineProperty-方法操作属性的时候，描述符的默认值为：&quot;&gt;&lt;a href=&quot;#当使用-defineProperty-方法操作属性的时候，描述符的默认值为：&quot; class=&quot;headerlink&quot; title=&quot;当使用 defineProperty()方法操作属性的时候，描述符的默认值为：&quot;&gt;&lt;/a&gt;当使用 defineProperty()方法操作属性的时候，描述符的默认值为：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;value: undefined&lt;/li&gt;
&lt;li&gt;set: undefined&lt;/li&gt;
&lt;li&gt;get: undefined&lt;/li&gt;
&lt;li&gt;writable: false&lt;/li&gt;
&lt;li&gt;enumerable: false&lt;/li&gt;
&lt;li&gt;configable: false&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;不使用该方法定义属性，默认值为：&quot;&gt;&lt;a href=&quot;#不使用该方法定义属性，默认值为：&quot; class=&quot;headerlink&quot; title=&quot;不使用该方法定义属性，默认值为：&quot;&gt;&lt;/a&gt;不使用该方法定义属性，默认值为：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;value: undefined&lt;/li&gt;
&lt;li&gt;set: undefined&lt;/li&gt;
&lt;li&gt;get: undefined&lt;/li&gt;
&lt;li&gt;writable: true&lt;/li&gt;
&lt;li&gt;enumerable: true&lt;/li&gt;
&lt;li&gt;configable: true&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;还支持批量修改对象属性以及描述对象&quot;&gt;&lt;a href=&quot;#还支持批量修改对象属性以及描述对象&quot; class=&quot;headerlink&quot; title=&quot;还支持批量修改对象属性以及描述对象&quot;&gt;&lt;/a&gt;还支持批量修改对象属性以及描述对象&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Object.defineProperties(obj, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value: &amp;apos;Tom&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    configable: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sex: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value: &amp;apos;man&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yongchao.tech:8080/tags/vue/"/>
    
      <category term="js" scheme="http://yongchao.tech:8080/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>stringify的使用</title>
    <link href="http://yongchao.tech:8080/2019/03/13/stringify%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yongchao.tech:8080/2019/03/13/stringify的使用/</id>
    <published>2019-03-13T14:34:07.000Z</published>
    <updated>2019-03-15T11:52:05.890Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章的由来是这样的：前两天遇到这样一个场景，接口返回了一个json对象，要求我进行格式化显示（显示出json对象的结构）。那么我就想了，一个对象要想显示出来，得转成string 类型的，于是我就使用了JSON.stringify(),但是转成字符串之后并没有缩进，显示出来的是一个长长的字符串。难道我还要自己人为的遍历对象,自己拼接一个带缩进的字符串么？太TM扯了！于是查看了stringify的官方文档，发现了很多有意思的东西，这个函数的作用远远不止是将json对象转成string那么简单，下面是我列举的stringify的几个小功能:</p><ol><li>json格式化，带缩进</li><li>过滤掉无效的字段</li><li>对符合某种条件的字段做操作</li></ol><p>原始数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;</span><br><span class="line">    sex: &apos;man&apos;,</span><br><span class="line">    name: &apos;Tom&apos;,</span><br><span class="line">    telphones: [</span><br><span class="line">        &quot;234123423&quot;,</span><br><span class="line">        &quot;2345234523&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一、原始情况，直接显示json字符串</p><p>code:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JOSN.stringify(person)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;sex&quot;:&quot;man&quot;,&quot;name&quot;:&quot;Tom&quot;,&quot;age&quot;:22,&quot;telphones&quot;:[&quot;2341234123&quot;,&quot;3452345&quot;]&#125;</span><br></pre></td></tr></table></figure></p><p>二、将一个json对象格式化显示出来</p><p>code:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON.stringify(person, null, 2)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    sex: &apos;man&apos;,</span><br><span class="line">    name: &apos;Tom&apos;,</span><br><span class="line">    telphones: [</span><br><span class="line">        &quot;234123423&quot;,</span><br><span class="line">        &quot;2345234523&quot;</span><br><span class="line">    ]   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>三、不显示某些字段（哪些字段不需要显示就返回undefined）</p><p>code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JOSN.stringify(person, function(k, v)&#123;</span><br><span class="line">    if (k === &apos;telphones&apos;)&#123;</span><br><span class="line">        return undefined</span><br><span class="line">    &#125;</span><br><span class="line">    return v</span><br><span class="line">&#125;, 2)</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    sex: &apos;man&apos;,</span><br><span class="line">    name: &apos;Tom&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>四、只显示某些字段</p><p>code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JOSN.stringify(person, [&apos;sex&apos;], 2)</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    sex: &apos;man&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更多详情<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章的由来是这样的：前两天遇到这样一个场景，接口返回了一个json对象，要求我进行格式化显示（显示出json对象的结构）。那么我就想了，一个对象要想显示出来，得转成string 类型的，于是我就使用了JSON.stringify(),但是转成字符串之后并没有缩进，显示出
      
    
    </summary>
    
    
      <category term="JSON js" scheme="http://yongchao.tech:8080/tags/JSON-js/"/>
    
  </entry>
  
  <entry>
    <title>将数组扁平化并去除其中重复数据，最终得到一个升序且不重复的数组</title>
    <link href="http://yongchao.tech:8080/2019/03/10/%E5%B0%86%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96%E5%B9%B6%E5%8E%BB%E9%99%A4%E5%85%B6%E4%B8%AD%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE%EF%BC%8C%E6%9C%80%E7%BB%88%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AA%E5%8D%87%E5%BA%8F%E4%B8%94%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E7%BB%84/"/>
    <id>http://yongchao.tech:8080/2019/03/10/将数组扁平化并去除其中重复数据，最终得到一个升序且不重复的数组/</id>
    <published>2019-03-09T18:48:18.000Z</published>
    <updated>2019-03-09T11:34:31.676Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr = [ [1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14] ] ] ], 10];</span><br></pre></td></tr></table></figure><h3 id="解决方法1"><a href="#解决方法1" class="headerlink" title="解决方法1"></a>解决方法1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...new Set(arr.flat(Infinity).sort((a,b) =&gt; a-b))]</span><br></pre></td></tr></table></figure><h3 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2"></a>解决方法2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[...new Set(arr.toString().split(&apos;,&apos;).map(Number).sort((a,b) =&gt; a-b))]</span><br><span class="line">or</span><br><span class="line">Arrary.froms(new Set(arr.toString().split(&apos;,&apos;).map(Number).sort((a,b) =&gt; a-b)))</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解决方法3"><a href="#解决方法3" class="headerlink" title="解决方法3"></a>解决方法3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function flatten(arr)&#123;</span><br><span class="line">  while(arr.some(item =&gt; Array.isArray(item)))&#123;</span><br><span class="line">    arr = [].concat(...arr)</span><br><span class="line">  &#125;</span><br><span class="line">  return arr</span><br><span class="line">&#125;</span><br><span class="line">Array.from(new Set(flatten(arr))).sort((a,b) =&gt; a-b)</span><br></pre></td></tr></table></figure><h3 id="解决方法4"><a href="#解决方法4" class="headerlink" title="解决方法4"></a>解决方法4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arrary.prototype.flat = function()&#123;</span><br><span class="line">  return [].concat[...this.map(item =&gt; (Array.isArray(item) ? item.flat() : [item]))]</span><br><span class="line">&#125;</span><br><span class="line">Arrary.prototype.unique = function() &#123;</span><br><span class="line">  return [...new Set(this)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>补充：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">数组实例的flat()</span><br><span class="line">特点：</span><br><span class="line">1.falt()默认为“拉平”一层</span><br><span class="line">2.如果原数组有空位， flat()方法会跳过空位</span><br><span class="line"></span><br><span class="line">flatMap方法：</span><br><span class="line">介绍：对原方法中的每个成员执行一个函数，然后对返回值的数组执行flat()方法。该方法返回一个新数组，不改变原数组</span><br><span class="line">// 相当于 [[2, 4], [3, 6], [4, 8]].flat()</span><br><span class="line">[2, 3, 4].flatMap((x) =&gt; [x, x * 2])</span><br><span class="line">// [2, 4, 3, 6, 4, 8]</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var arr = [ [1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14] ] ] ], 10];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;解决方法1&quot;&gt;&lt;a href=&quot;#解决方法1&quot; class=&quot;headerlink&quot; title=&quot;解决方法1&quot;&gt;&lt;/a&gt;解决方法1&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[...new Set(arr.flat(Infinity).sort((a,b) =&amp;gt; a-b))]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;解决方法2&quot;&gt;&lt;a href=&quot;#解决方法2&quot; class=&quot;headerlink&quot; title=&quot;解决方法2&quot;&gt;&lt;/a&gt;解决方法2&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[...new Set(arr.toString().split(&amp;apos;,&amp;apos;).map(Number).sort((a,b) =&amp;gt; a-b))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;or&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Arrary.froms(new Set(arr.toString().split(&amp;apos;,&amp;apos;).map(Number).sort((a,b) =&amp;gt; a-b)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yongchao.tech:8080/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue中使用cytoscape绘制拓扑图方案</title>
    <link href="http://yongchao.tech:8080/2019/03/08/vue%E4%B8%AD%E4%BD%BF%E7%94%A8cytoscape%E7%BB%98%E5%88%B6%E6%8B%93%E6%89%91%E5%9B%BE%E6%96%B9%E6%A1%88/"/>
    <id>http://yongchao.tech:8080/2019/03/08/vue中使用cytoscape绘制拓扑图方案/</id>
    <published>2019-03-08T15:36:50.000Z</published>
    <updated>2019-03-09T11:35:02.264Z</updated>
    
    <content type="html"><![CDATA[<p>有一个需求需要绘制拓扑图，然后选图表库选择了cytoscape,看了官方文档<a href="http://js.cytoscape.org，感觉和network.js很像，包括两种element,一种是node（描述其相关信息），另一种是" target="_blank" rel="noopener">http://js.cytoscape.org，感觉和network.js很像，包括两种element,一种是node（描述其相关信息），另一种是</a> edge(描述node之间的关系， 通过指明source, target确定指向)，其余的都是一些样式配置和事件的监听，可以说是非常的清晰明了了。此外文档的Extensions部分提供了各种的UI插件和API插件，拓展性也不错。</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">nodes: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"a"</span>,//required</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"demo"</span>,//optional</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"b"</span>,//required</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"demo"</span>,//optional</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">edges: [</span><br><span class="line">  //描述了 a--&gt;b</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"aadsfasdf"</span>, //optional</span><br><span class="line">    <span class="string">"source"</span>: <span class="string">"a"</span>, //required, <span class="built_in">source</span>-node-id</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"b"</span>,  //required target-node-id</span><br><span class="line">  &#125;,</span><br><span class="line">  //描述了 a--&gt;a,会出现一个指向自己的圆，不过想要实现这一点需要cytoscape-edgehandles插件</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"aadsfasdf"</span>, //optional</span><br><span class="line">    <span class="string">"source"</span>: <span class="string">"a"</span>, //required, <span class="built_in">source</span>-node-id</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"a"</span>,  //required target-node-id</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="实际栗子"><a href="#实际栗子" class="headerlink" title="实际栗子"></a>实际栗子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;cy&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import cytoscape from &apos;cytoscape&apos;</span><br><span class="line">&lt;!--为edge添加事件和二维的布局 --&gt;</span><br><span class="line">import edgehandles from &apos;cytoscape-edgehandles&apos;</span><br><span class="line"></span><br><span class="line">&lt;!-- 提供类似于tooltip的提示框 --&gt;</span><br><span class="line">import popper from &apos;cytoscape-popper&apos;</span><br><span class="line">import tippy from &apos;tippy.js&apos;</span><br><span class="line"></span><br><span class="line">&lt;!-- 引入data --&gt;</span><br><span class="line">import data from &apos;./data.js&apos;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用插件 --&gt;</span><br><span class="line">cytoscape.use(edgehandles)</span><br><span class="line">cytoscape.use(popper)</span><br><span class="line"></span><br><span class="line">&lt;!-- 可以使用自己选的配色 --&gt;</span><br><span class="line">let colors = [&apos;#FFFFCC&apos;, &apos;#CCFFFF&apos;, &apos;#FFCCCC&apos;, &apos;#FFFF99&apos;, &apos;#CCCCFF&apos;, &apos;#FF9966&apos;, &apos;#FF6666&apos;, &apos;#FFCC99&apos;, &apos;#CCFF99&apos;, &apos;#CCCCCC&apos;, &apos;#CCFFCC&apos;, &apos;#99CC99&apos;, &apos;#99CCCC&apos;]</span><br><span class="line">let colors1 = [&apos;#FF6666&apos;, &apos;#006699&apos;, &apos;#FF9966&apos;, &apos;#0066CC&apos;, &apos;#339933&apos;, &apos;#FFCC33&apos;, &apos;#FF9900&apos;, &apos;#FFFFCC&apos;, &apos;#CC6600&apos;, &apos;#CCCC44&apos;, &apos;#99CC33&apos;, &apos;#0099CC&apos;, &apos;#99CCCC&apos;, &apos;#FF0033&apos;, &apos;#333399&apos;, &apos;#CCCC00&apos;, &apos;#33CC99&apos;, &apos;#FFFF00&apos;, &apos;#336699&apos;]</span><br><span class="line">let colors2 = [&apos;#CCFF99&apos;, &apos;#99CCFF&apos;, &apos;#99CCCC&apos;, &apos;#CCFFCC&apos;, &apos;#66CCCC&apos;, &apos;#CCCCFF&apos;, &apos;#FFFFCC&apos;, &apos;#CCFFFF&apos;, &apos;#66CCFF&apos;, &apos;#6699CC&apos;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let vm = null</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tippyInstance: null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    draw () &#123;</span><br><span class="line">      let nodes = data.nodes</span><br><span class="line">      let edges = data.edges</span><br><span class="line">      nodes.map((x, i) =&gt; &#123;</span><br><span class="line">        x.data.color = colors[i % 13]</span><br><span class="line">        // x.data.color = colors1[i % 19]</span><br><span class="line">        x.data.color = colors2[i % 10]</span><br><span class="line">        return x</span><br><span class="line">      &#125;)</span><br><span class="line">      let cy = cytoscape(&#123;</span><br><span class="line">        container: document.getElementById(&apos;cy&apos;),</span><br><span class="line">        layout: &#123;</span><br><span class="line">          name: &apos;grid&apos;,</span><br><span class="line">          concentric: function (n) &#123; return n.id() === &apos;j&apos; ? 200 : 0 &#125;,</span><br><span class="line">          levelWidth: function (nodes) &#123; return 100 &#125;,</span><br><span class="line">          minNodeSpacing: 100</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        style: [</span><br><span class="line">          &#123;</span><br><span class="line">            selector: &apos;node&apos;,</span><br><span class="line">            style: &#123;</span><br><span class="line">              &apos;content&apos;: &apos;data(name)&apos;,</span><br><span class="line">              &apos;width&apos;: &apos;mapData(size, 0, 1.0, 40, 60)&apos;,</span><br><span class="line">              &apos;height&apos;: &apos;mapData(size, 0, 1.0, 40, 60)&apos;,</span><br><span class="line">              &apos;background-color&apos;: &apos;data(color)&apos;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          &#123;</span><br><span class="line">            selector: &apos;edge&apos;,</span><br><span class="line">            style: &#123;</span><br><span class="line">              &apos;curve-style&apos;: &apos;unbundled-bezier&apos;,</span><br><span class="line">              &apos;target-arrow-shape&apos;: &apos;triangle&apos;,</span><br><span class="line">              &apos;target-arrow-color&apos;: &apos;data(colour)&apos;,</span><br><span class="line">              &apos;line-color&apos;: &apos;data(colour)&apos;,</span><br><span class="line">              &apos;width&apos;: &apos;mapData(width, 0, 1.0, 1, 3)&apos;,</span><br><span class="line">              // &apos;label&apos;: &apos;data(info)&apos;</span><br><span class="line">              &apos;control-point-distances&apos;: [40, -40],</span><br><span class="line">              &apos;control-point-weights&apos;: [0.25, 0.75]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          // some style for the extension</span><br><span class="line"></span><br><span class="line">          &#123;</span><br><span class="line">            selector: &apos;.eh-handle&apos;,</span><br><span class="line">            style: &#123;</span><br><span class="line">              &apos;background-color&apos;: &apos;red&apos;,</span><br><span class="line">              &apos;width&apos;: 12,</span><br><span class="line">              &apos;height&apos;: 12,</span><br><span class="line">              &apos;shape&apos;: &apos;ellipse&apos;,</span><br><span class="line">              &apos;overlay-opacity&apos;: 0,</span><br><span class="line">              &apos;border-width&apos;: 12, // makes the handle easier to hit</span><br><span class="line">              &apos;border-opacity&apos;: 0</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          &#123;</span><br><span class="line">            selector: &apos;.eh-hover&apos;,</span><br><span class="line">            style: &#123;</span><br><span class="line">              &apos;background-color&apos;: &apos;red&apos;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          &#123;</span><br><span class="line">            selector: &apos;.eh-source&apos;,</span><br><span class="line">            style: &#123;</span><br><span class="line">              &apos;border-width&apos;: 2,</span><br><span class="line">              &apos;border-color&apos;: &apos;red&apos;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          &#123;</span><br><span class="line">            selector: &apos;.eh-target&apos;,</span><br><span class="line">            style: &#123;</span><br><span class="line">              &apos;border-width&apos;: 2,</span><br><span class="line">              &apos;border-color&apos;: &apos;red&apos;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          &#123;</span><br><span class="line">            selector: &apos;.eh-preview, .eh-ghost-edge&apos;,</span><br><span class="line">            style: &#123;</span><br><span class="line">              &apos;background-color&apos;: &apos;red&apos;,</span><br><span class="line">              &apos;line-color&apos;: &apos;red&apos;,</span><br><span class="line">              &apos;target-arrow-color&apos;: &apos;red&apos;,</span><br><span class="line">              &apos;source-arrow-color&apos;: &apos;red&apos;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          &#123;</span><br><span class="line">            selector: &apos;.eh-ghost-edge.eh-preview-active&apos;,</span><br><span class="line">            style: &#123;</span><br><span class="line">              &apos;opacity&apos;: 0</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            selector: &apos;.edge-out-highlight&apos;,</span><br><span class="line">            style: &#123;</span><br><span class="line">              &apos;line-color&apos;: &apos;black&apos;,</span><br><span class="line">              &apos;target-arrow-color&apos;: &apos;black&apos;,</span><br><span class="line">              width: 3</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            selector: &apos;.edge-in-highlight&apos;,</span><br><span class="line">            style: &#123;</span><br><span class="line">              &apos;line-color&apos;: &apos;purple&apos;,</span><br><span class="line">              &apos;target-arrow-color&apos;: &apos;purple&apos;,</span><br><span class="line">              width: 3</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        elements: &#123;</span><br><span class="line">          nodes: nodes,</span><br><span class="line">          edges: edges</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      // edge添加事件</span><br><span class="line">      cy.on(&apos;tap&apos;, &apos;edge&apos;, function (evt) &#123;</span><br><span class="line">        var node = evt.target</span><br><span class="line">        if (vm.tippyInstance) &#123;</span><br><span class="line">          vm.tippyInstance.hide()</span><br><span class="line">          vm.tippyInstance.destroy()</span><br><span class="line">        &#125;</span><br><span class="line">        vm.makeTippy(node)</span><br><span class="line">        vm.tippyInstance.show()</span><br><span class="line">      &#125;)</span><br><span class="line">      </span><br><span class="line">      // node 添加事件</span><br><span class="line">      cy.on(&apos;tap&apos;, &apos;edge&apos;, function (evt) &#123;</span><br><span class="line">        var node = evt.target</span><br><span class="line">        if (vm.tippyInstance) &#123;</span><br><span class="line">          vm.tippyInstance.hide()</span><br><span class="line">          vm.tippyInstance.destroy()</span><br><span class="line">        &#125;</span><br><span class="line">        vm.makeTippy(node)</span><br><span class="line">        vm.tippyInstance.show()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      cy.on(&apos;tap&apos;, &apos;node&apos;, function (evt) &#123;</span><br><span class="line">        var node = evt.target</span><br><span class="line">        node.incomers(&apos;edge&apos;).toggleClass(&apos;edge-in-highlight&apos;)</span><br><span class="line">        node.edgesWith(&apos;*&apos;).toggleClass(&apos;edge-out-highlight&apos;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    makeTippy (node) &#123;</span><br><span class="line">      &lt;!-- 点击edge出现一个弹框，显示一些额外的信息 --&gt;</span><br><span class="line">      this.tippyInstance = tippy(node.popperRef(), &#123;</span><br><span class="line">        content: function () &#123;</span><br><span class="line">          var div = document.createElement(&apos;div&apos;)</span><br><span class="line">          div.innerHTML = `&lt;p style=&quot;text-align:left;padding-top:8px;&quot;&gt;$&#123;node._private.data.info&#125;&lt;/p&gt;`</span><br><span class="line">          return div</span><br><span class="line">        &#125;,</span><br><span class="line">        trigger: &apos;manual&apos;,</span><br><span class="line">        arrow: true,</span><br><span class="line">        placement: &apos;bottom&apos;,</span><br><span class="line">        hideOnClick: false,</span><br><span class="line">        multiple: true,</span><br><span class="line">        sticky: true</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    vm = this</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    this.$nextTick(() =&gt; &#123;</span><br><span class="line">      this.draw()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一个需求需要绘制拓扑图，然后选图表库选择了cytoscape,看了官方文档&lt;a href=&quot;http://js.cytoscape.org，感觉和network.js很像，包括两种element,一种是node（描述其相关信息），另一种是&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://js.cytoscape.org，感觉和network.js很像，包括两种element,一种是node（描述其相关信息），另一种是&lt;/a&gt; edge(描述node之间的关系， 通过指明source, target确定指向)，其余的都是一些样式配置和事件的监听，可以说是非常的清晰明了了。此外文档的Extensions部分提供了各种的UI插件和API插件，拓展性也不错。&lt;/p&gt;
&lt;h3 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nodes: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;,//required&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;demo&quot;&lt;/span&gt;,//optional&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;,//required&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;demo&quot;&lt;/span&gt;,//optional&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;edges: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  //描述了 a--&amp;gt;b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;aadsfasdf&quot;&lt;/span&gt;, //optional&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;source&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;, //required, &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;-node-id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;target&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;,  //required target-node-id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  //描述了 a--&amp;gt;a,会出现一个指向自己的圆，不过想要实现这一点需要cytoscape-edgehandles插件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;aadsfasdf&quot;&lt;/span&gt;, //optional&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;source&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;, //required, &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;-node-id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;target&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;,  //required target-node-id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yongchao.tech:8080/tags/vue/"/>
    
      <category term="graph" scheme="http://yongchao.tech:8080/tags/graph/"/>
    
  </entry>
  
  <entry>
    <title>cytoscape的简单使用</title>
    <link href="http://yongchao.tech:8080/2019/03/07/cytoscape%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://yongchao.tech:8080/2019/03/07/cytoscape的简单使用/</id>
    <published>2019-03-07T14:29:42.000Z</published>
    <updated>2019-03-07T07:47:43.914Z</updated>
    
    <content type="html"><![CDATA[<h3 id="cy实例对象常用操作"><a href="#cy实例对象常用操作" class="headerlink" title="cy实例对象常用操作"></a>cy实例对象常用操作</h3><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><pre><code>cy.add(eleObj/eleObjs/eles)</code></pre><h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><pre><code>cy.remove(elems/selector)</code></pre><h4 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h4><pre><code>cy.colleciton 返回一个new empty collectioncy.getElementById() or  cy.$id()   return one elementcy.$(selector)、cy.elements(selector)  return  elementscy.nodes(selector)cy.edges(selector)cy.filter(selector) return elementscy.filter(function(ele, i, eles))  - ele The current element under consideration for filtering.  - i The counter used for iteration over the elements in the graph.  - eles The collection of elements being filtered</code></pre><blockquote><p>ps: cy.nodes(‘[weight &gt; 50]’);</p></blockquote><h4 id="批量修改-能够有效的减少渲染成本"><a href="#批量修改-能够有效的减少渲染成本" class="headerlink" title="批量修改(能够有效的减少渲染成本)"></a>批量修改(能够有效的减少渲染成本)</h4><pre><code>cy.batch()cy.satrtBatch()cy.endBatch()</code></pre><blockquote><p>demo如下<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy.startBatch();</span><br><span class="line"></span><br><span class="line">&lt;!-- 多次的样式修改操作 --&gt;</span><br><span class="line">cy.$(&apos;#j&apos;)</span><br><span class="line">  .data(&apos;weight&apos;, &apos;70&apos;)</span><br><span class="line">  .addClass(&apos;funny&apos;)</span><br><span class="line">  .removeClass(&apos;serious&apos;)</span><br><span class="line"></span><br><span class="line">cy.endBatch();</span><br><span class="line">能够减少中间的redraw的成本，和jquery中将一系列修改样式的操作合并到一个类中，对这个类进行操作一个道理。</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="create"><a href="#create" class="headerlink" title="create"></a>create</h4><pre><code>cy.mount()cy.unmount()</code></pre><h4 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h4><pre><code>cy.destroy() 有利于gc</code></pre><h4 id="临时数据操作"><a href="#临时数据操作" class="headerlink" title="临时数据操作"></a>临时数据操作</h4><pre><code>cy.scratch([namespace], [value])cy.removeScratch()</code></pre><h3 id="全局函数：-cytoscape在调试过程中在console中打印一些错"><a href="#全局函数：-cytoscape在调试过程中在console中打印一些错" class="headerlink" title="全局函数： cytoscape在调试过程中在console中打印一些错"></a>全局函数： cytoscape在调试过程中在console中打印一些错</h3><ul><li>cytoscape.warnings(false) 禁止报错</li><li>cytoscape.warnings(true)  开启报错</li><li>cytoscape.warnings()      得到当前状态</li></ul><h3 id="collection的一些操作"><a href="#collection的一些操作" class="headerlink" title="collection的一些操作"></a>collection的一些操作</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;cy实例对象常用操作&quot;&gt;&lt;a href=&quot;#cy实例对象常用操作&quot; class=&quot;headerlink&quot; title=&quot;cy实例对象常用操作&quot;&gt;&lt;/a&gt;cy实例对象常用操作&lt;/h3&gt;&lt;h4 id=&quot;添加&quot;&gt;&lt;a href=&quot;#添加&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="graph" scheme="http://yongchao.tech:8080/tags/graph/"/>
    
  </entry>
  
  <entry>
    <title>vue中使用highcharts和echarts的实践</title>
    <link href="http://yongchao.tech:8080/2019/03/07/vue%E4%B8%AD%E4%BD%BF%E7%94%A8highcharts%E5%92%8Cecharts%E7%9A%84%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yongchao.tech:8080/2019/03/07/vue中使用highcharts和echarts的实践/</id>
    <published>2019-03-07T06:28:10.472Z</published>
    <updated>2019-03-07T06:28:10.474Z</updated>
    
    <content type="html"><![CDATA[<p>  我从事云平台前端的开发，由于项目的需要，写了一个云监控Monitor项目。起初，我选择了 Echarts， 原因很简单，中文文档，定制化能力也比较好。事实上，使用了一年多来，用的也是蛮顺手的。但是，这是一个监控项目,里面存在大量的图，每个图有着巨量的数据，而且每条line的名字也超长。带来的问题就是，页面及其卡顿，即使是我限制了每个图中的数据量，仍然无法降低，页面无操作的情况下，CPU仍然占据20%以上（八个图，每个图平均10条line）。网上找了一通，都指向z_render()函数，echarts会不停的执行这个函数。实在是不堪忍受这样的卡顿，在进行了充分调研的情况下,果断换了highcharts。</p><p>  经过实际项目测试：同等数量的情况下，highcharts和echarts 所占的内存相近，但CPU占比很低。举一个栗子，一个页面上有八个图，每个图平均大概10条线，当页面渲染完成，无任何鼠标点击的时候，echarts的CPU占比稳定在20%左右，highcharts始终在1%以下。</p><p><img src="/images/highcharts-q.png" alt="highcharts"><br><img src="/images/echarts-q.png" alt="echarts"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  我从事云平台前端的开发，由于项目的需要，写了一个云监控Monitor项目。起初，我选择了 Echarts， 原因很简单，中文文档，定制化能力也比较好。事实上，使用了一年多来，用的也是蛮顺手的。但是，这是一个监控项目,里面存在大量的图，每个图有着巨量的数据，而且每条lin
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yongchao.tech:8080/tags/vue/"/>
    
      <category term="highcharts" scheme="http://yongchao.tech:8080/tags/highcharts/"/>
    
      <category term="echarts" scheme="http://yongchao.tech:8080/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>post和get的区别</title>
    <link href="http://yongchao.tech:8080/2019/03/06/post%E5%92%8Cget%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yongchao.tech:8080/2019/03/06/post和get的区别/</id>
    <published>2019-03-05T17:02:27.000Z</published>
    <updated>2019-03-05T09:25:40.078Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>首先， GET、POST 都是htt请求的的方法。它们本质上并无差别。HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的 。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>那么， 问题来了。<br>1、”GET请求在URL中传送的参数是有长度限制的，而POST没有”是什么鬼？。<br>  答： url长度限制都是浏览器设置的；而GET也可以在request body中传递参数，只不过不同的服务器对这些数据的处理方式不同，有些接受，有些忽略。</p><p>2、GET和POST还有一个重大区别，简单的说：GET产生一个TCP数据包；POST产生两个TCP数据包。长的说：对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。<br>  答： 1. GET与POST都有自己的语义，不能随便混用。</p><pre><code>2. 据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。3. 并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;首先， GET、POST 都是htt请求的的方法。它们本质上并无差别。HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/I
      
    
    </summary>
    
    
      <category term="http" scheme="http://yongchao.tech:8080/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>webhook-demo</title>
    <link href="http://yongchao.tech:8080/2019/03/05/webhook-demo/"/>
    <id>http://yongchao.tech:8080/2019/03/05/webhook-demo/</id>
    <published>2019-03-05T09:46:15.000Z</published>
    <updated>2019-03-05T01:48:14.389Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&apos;http&apos;)</span><br><span class="line">  , exec = require(&apos;exec&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const PORT = process.env.PORT || 9988</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let transporter = nodemailer.createTransport(&#123;</span><br><span class="line">  service: &apos;smpt.163.com&apos;,</span><br><span class="line">  host: &apos;smtp.163.com&apos;,</span><br><span class="line">  secureConnection: true,</span><br><span class="line">  port:    465,</span><br><span class="line">  auth: &#123;</span><br><span class="line">    user: &apos;XXX@163.com&apos;,</span><br><span class="line">    pass: &apos;XXXXXXX&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">let defaultOpions = &#123;</span><br><span class="line">  from: &apos;yongchao blog &lt;XXX@163.com&gt;&apos;,</span><br><span class="line">  to: &apos;XXXX@qq.com&apos;,</span><br><span class="line">  subject: &apos;yongchao blog&apos;,</span><br><span class="line">  html: &apos;&lt;b&gt;blog deploy success !&lt;/b&gt;&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var deployServer = http.createServer(function(request, response) &#123;</span><br><span class="line">  if (request.url.search(/deploy\/?$/i) &gt; 0) &#123;</span><br><span class="line"> </span><br><span class="line">    var commands = [</span><br><span class="line">      &apos;make restart&apos; //这是我自定义的重新部署的代码</span><br><span class="line">    ].join(&apos; &amp;&amp; &apos;)</span><br><span class="line"> </span><br><span class="line">    exec(commands, function(err, out, code) &#123;</span><br><span class="line">      if (err instanceof Error) &#123;</span><br><span class="line">        response.writeHead(500)</span><br><span class="line">        response.end(&apos;Server Internal Error.&apos;)</span><br><span class="line">        throw err</span><br><span class="line">      &#125;</span><br><span class="line">      process.stderr.write(err)</span><br><span class="line">      process.stdout.write(out)</span><br><span class="line">      response.writeHead(200)</span><br><span class="line">      response.end(&apos;Deploy Done.&apos;)</span><br><span class="line">      transporter.sendMail(defaultOpions, (err, info) =&gt; &#123;</span><br><span class="line">          if(err) &#123;</span><br><span class="line">                  console.error(err)</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">              console.log(err, info)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"> </span><br><span class="line">  &#125; else &#123;</span><br><span class="line"> </span><br><span class="line">    response.writeHead(404)</span><br><span class="line">    response.end(&apos;Not Found.&apos;)</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">deployServer.listen(PORT, () =&gt; &#123;</span><br><span class="line">  console.log(&apos;start service&apos; + PORT)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue-directive</title>
    <link href="http://yongchao.tech:8080/2019/03/05/vue-directive/"/>
    <id>http://yongchao.tech:8080/2019/03/05/vue-directive/</id>
    <published>2019-03-04T19:34:37.000Z</published>
    <updated>2019-03-04T11:52:36.157Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue-directive-的几个钩子函数"><a href="#vue-directive-的几个钩子函数" class="headerlink" title="vue-directive 的几个钩子函数"></a>vue-directive 的几个钩子函数</h3><ul><li>bind  指令第一次被绑定到元素时调用，只调用一次</li><li>inserted 被绑定元素插入到父节点时调用</li><li>update 被绑定元素所在模版更新时调用，不论绑定值是否变化都调用</li><li>componentUpdated 被绑定元素所在模版在完成一次更新周期时调用</li><li>unbind 元素解绑时调用，只调用一次</li></ul><a id="more"></a><h3 id="每个钩子函数都有参数："><a href="#每个钩子函数都有参数：" class="headerlink" title="每个钩子函数都有参数："></a>每个钩子函数都有参数：</h3><ul><li>el: 指令绑定的element,用来操作dom</li><li>binging 一个对象，包含以下属性<ul><li>name: 指令名，不包含v-前缀</li><li>value: 指令的绑定值，例如 v-my-directive=叮+ l”， value的值是，2</li><li>oldValue: 指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用.无论value 值是否改变都可用。</li><li>expression: 绑定值的字符串形式。例如v-my-directive=”1+ 1”，expression的值是”1+I”.</li><li>arg： 指令的arguments, 例如 v-my-directive:foo, arg 的值是 foo</li><li>modifiers: 一个包含修饰符的对象 。 例如 v-my-directive.foo.bar，修饰符对象 modifiers的值是{ foo: true, bar: true }</li></ul></li><li>vnode</li><li>oldVnode: 上一个虚拟节点仅在 update 和 componentUpdated 钩子中可用 。 </li></ul><h4 id="clickoutsize指令的实现"><a href="#clickoutsize指令的实现" class="headerlink" title="clickoutsize指令的实现"></a>clickoutsize指令的实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(&apos;clickoutside&apos;, &#123;</span><br><span class="line">  bind: function (el, binding) &#123;</span><br><span class="line">    function documentHandler (e) &#123;</span><br><span class="line">      if (binding.arg === &apos;esc&apos; &amp;&amp; e.keyCode === 27) &#123;</span><br><span class="line">        &lt;!-- v-clickoutside的value 是一个函数，这里相当于执行绑定的函数 --&gt;</span><br><span class="line">        binding.value(e)</span><br><span class="line">      &#125;</span><br><span class="line">      &lt;!-- 如果点击的元素是在绑定了v-clickoutside指令元素的内容，则忽略 --&gt;</span><br><span class="line">      if (el.contains(e.target)) &#123;</span><br><span class="line">        return false</span><br><span class="line">      &#125;</span><br><span class="line">      if (binding.expression) &#123;</span><br><span class="line">        binding.value(e)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;!-- 在元素添加一个元素用来存绑定的函数，是为了unbind的时候能够找到这个函数 --&gt;</span><br><span class="line">    el.__vueClickOutside__ = documentHandler</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 在全局添加一些事件 --&gt;</span><br><span class="line">    window.addEventListener(&apos;keydown&apos;, documentHandler)</span><br><span class="line">    document.addEventListener(&apos;click&apos;, documentHandler)</span><br><span class="line">    document.addEventListener(&apos;keydown&apos;, documentHandler)</span><br><span class="line">  &#125;,</span><br><span class="line">  unbind: function (el) &#123;</span><br><span class="line">    document.removeEventListener(&apos;click&apos;, el.__vueClickOutside__)</span><br><span class="line">    delete el.__vueClickOutside__</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;vue-directive-的几个钩子函数&quot;&gt;&lt;a href=&quot;#vue-directive-的几个钩子函数&quot; class=&quot;headerlink&quot; title=&quot;vue-directive 的几个钩子函数&quot;&gt;&lt;/a&gt;vue-directive 的几个钩子函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;bind  指令第一次被绑定到元素时调用，只调用一次&lt;/li&gt;
&lt;li&gt;inserted 被绑定元素插入到父节点时调用&lt;/li&gt;
&lt;li&gt;update 被绑定元素所在模版更新时调用，不论绑定值是否变化都调用&lt;/li&gt;
&lt;li&gt;componentUpdated 被绑定元素所在模版在完成一次更新周期时调用&lt;/li&gt;
&lt;li&gt;unbind 元素解绑时调用，只调用一次&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yongchao.tech:8080/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>对于echarts图表随着浏览器窗口resize的优化</title>
    <link href="http://yongchao.tech:8080/2019/03/05/%E5%AF%B9%E4%BA%8Eecharts%E5%9B%BE%E8%A1%A8%E9%9A%8F%E7%9D%80%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AA%97%E5%8F%A3resize%E7%9A%84%E4%BC%98%E5%8C%96/"/>
    <id>http://yongchao.tech:8080/2019/03/05/对于echarts图表随着浏览器窗口resize的优化/</id>
    <published>2019-03-04T19:07:32.000Z</published>
    <updated>2019-03-04T11:14:56.329Z</updated>
    
    <content type="html"><![CDATA[<p>说明： 有时候项目中会显示一些图表，而且width可能并不是固定的（可能100%），那么当浏览器窗口变化的时候，图表的大小应该跟随着变大或变小，称之为resize</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 用来处理每一个有图表的页面添加resize , 离开时移除resize函数</span><br><span class="line"> */</span><br><span class="line">import echarts from &apos;echarts&apos;</span><br><span class="line">import _ from &apos;lodash&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      doms: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    chartResize () &#123;</span><br><span class="line">      return _.throttle(() =&gt; &#123;</span><br><span class="line">        return this.doms.forEach(dom =&gt; &#123;</span><br><span class="line">          dom &amp;&amp; dom.resize()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;, 400)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    initChart () &#123;</span><br><span class="line">      this.doms.forEach(dom =&gt; &#123;</span><br><span class="line">        dom &amp;&amp; echarts.init(dom)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    console.log(&apos;mixins mounted&apos;)</span><br><span class="line">    this.doms = [this.$refs[&apos;charts&apos;]]</span><br><span class="line">    this.initChart()</span><br><span class="line">    window.addEventListener(&apos;resize&apos;, this.chartResize)</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed () &#123;</span><br><span class="line">    console.log(&apos;mixins destroyed&apos;)</span><br><span class="line">    window.removeEventListener(&apos;resize&apos;, this.chartResize)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps: 使用的时候在需要图表的页面引入这个mixins</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说明： 有时候项目中会显示一些图表，而且width可能并不是固定的（可能100%），那么当浏览器窗口变化的时候，图表的大小应该跟随着变大或变小，称之为resize&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yongchao.tech:8080/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>覆盖ui框架css原生样式</title>
    <link href="http://yongchao.tech:8080/2019/03/05/%E8%A6%86%E7%9B%96ui%E6%A1%86%E6%9E%B6css%E5%8E%9F%E7%94%9F%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yongchao.tech:8080/2019/03/05/覆盖ui框架css原生样式/</id>
    <published>2019-03-04T19:03:48.000Z</published>
    <updated>2019-03-04T11:06:29.378Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>加scoped</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">/deep/.rootName .className&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">or </span><br><span class="line"></span><br><span class="line">.rootName &gt;&gt;&gt; .className&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>不加scoped<br>原理：在组件中添加了父css类, 在修改的样式作用域限定为父css类，减小css的影响范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.rootName .className&#123;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;加scoped&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yongchao.tech:8080/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-intro使用方法及注意点</title>
    <link href="http://yongchao.tech:8080/2019/03/05/vue-intro%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8A%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
    <id>http://yongchao.tech:8080/2019/03/05/vue-intro使用方法及注意点/</id>
    <published>2019-03-04T19:01:39.000Z</published>
    <updated>2019-03-04T11:02:30.690Z</updated>
    
    <content type="html"><![CDATA[<p>1、使用时必须引入intro.js<br>2、let intro=Intro.intro()<br>3、intro.setOptions({}).start().oncomplete().onskip(function)<br>4、intro这个插件只能提示一些静态的页面上已经有的一些元素，异步的或者是后来动态显示的元素无法加上提示.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、使用时必须引入intro.js&lt;br&gt;2、let intro=Intro.intro()&lt;br&gt;3、intro.setOptions({}).start().oncomplete().onskip(function)&lt;br&gt;4、intro这个插件只能提示一些静态的页面上
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yongchao.tech:8080/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue中定时器问题</title>
    <link href="http://yongchao.tech:8080/2019/03/05/vue%E4%B8%AD%E5%AE%9A%E6%97%B6%E5%99%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://yongchao.tech:8080/2019/03/05/vue中定时器问题/</id>
    <published>2019-03-04T18:58:04.000Z</published>
    <updated>2019-03-04T11:01:46.800Z</updated>
    
    <content type="html"><![CDATA[<p>Vue中使用了定时器后在关闭页面后必须手动清理</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">方案一</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  tiemr: null  </span><br><span class="line">&#125;,</span><br><span class="line">method: &#123;</span><br><span class="line">  method1 () &#123;</span><br><span class="line">    this.timer = setInterval(()=&gt; &#123;</span><br><span class="line">      // logic </span><br><span class="line">    &#125;, interval)</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">    clearInterval(this.timer)</span><br><span class="line">    this.timer = null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方案二：</span><br><span class="line"></span><br><span class="line">通过$once来监听定时器，在beforeDestroy中可以被清除</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">优点：这两段代码写在一起，不同特意定义一个data.timer</span><br><span class="line">缺点：适用于只有离开页面关闭定时器的情况，</span><br><span class="line">const timer = setInterval(()=&gt;&#123;</span><br><span class="line">    // logic</span><br><span class="line">&#125;, interval)</span><br><span class="line"></span><br><span class="line">this.$once(&apos;hook:beforeDestroy&apos;, ()=&gt;&#123;</span><br><span class="line">    clearInterval(timer)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ps: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">template&gt;</span><br><span class="line">  &lt;div class=&quot;test&quot;&gt;</span><br><span class="line">    &lt;Button @click=&quot;addInterval()&quot;&gt;add&lt;/Button&gt;</span><br><span class="line">    &lt;h1&gt;测试&lt;/h1&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addInterval () &#123;</span><br><span class="line">      const timer = setInterval(() =&gt; &#123;</span><br><span class="line">        console.log(&apos;aaa&apos;)</span><br><span class="line">      &#125;, 100)</span><br><span class="line">      this.$once(&apos;hook:beforeDestroy&apos;, () =&gt; &#123;</span><br><span class="line">        clearInterval(timer)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue中使用了定时器后在关闭页面后必须手动清理&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yongchao.tech:8080/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>js的灵活</title>
    <link href="http://yongchao.tech:8080/2019/03/04/js%E7%9A%84%E7%81%B5%E6%B4%BB/"/>
    <id>http://yongchao.tech:8080/2019/03/04/js的灵活/</id>
    <published>2019-03-04T14:53:55.000Z</published>
    <updated>2019-03-05T01:45:28.268Z</updated>
    
    <content type="html"><![CDATA[<h3 id="js是超级灵活的语言"><a href="#js是超级灵活的语言" class="headerlink" title="js是超级灵活的语言"></a>js是超级灵活的语言</h3><h4 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var checkObj = function () &#123;&#125;</span><br><span class="line">    checkObj.prototype.checkName = function()&#123;</span><br><span class="line">    console.log(&apos;checkName&apos;)</span><br><span class="line">&#125;</span><br><span class="line">checkObj.prototype.checkEmail = function()&#123;</span><br><span class="line">    console.log(&apos;checkEmail&apos;)</span><br><span class="line">&#125;</span><br><span class="line">checkObj.prototype.checkPassword = function()&#123;</span><br><span class="line">    console.log(&apos;checkPassword&apos;)</span><br><span class="line">&#125;</span><br><span class="line">var a = new checkObj()</span><br><span class="line">a.checkName()</span><br><span class="line">a.checkEmail()</span><br><span class="line">a.checkPassword()</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var checkObj = function () &#123;&#125;</span><br><span class="line">checkObj.prototype = &#123;</span><br><span class="line">    checkName:function()&#123;</span><br><span class="line">        console.log(&apos;checkName&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    checkEmail: function()&#123;</span><br><span class="line">        console.log(&apos;checkEmail&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    checkPassword: function()&#123;</span><br><span class="line">        console.log(&apos;checkPassword&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var a = new checkObj()</span><br><span class="line">a.checkName()</span><br><span class="line">a.checkEmail()</span><br><span class="line">a.checkPassword()</span><br></pre></td></tr></table></figure><h3 id="step3-链式调用"><a href="#step3-链式调用" class="headerlink" title="step3 链式调用"></a>step3 链式调用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var checkObj = function () &#123;&#125;</span><br><span class="line">    checkObj.prototype = &#123;</span><br><span class="line">        checkName:function()&#123;</span><br><span class="line">        console.log(&apos;checkName&apos;)</span><br><span class="line">        return this</span><br><span class="line">    &#125;,</span><br><span class="line">    checkEmail: function()&#123;</span><br><span class="line">        console.log(&apos;checkEmail&apos;)</span><br><span class="line">        return this</span><br><span class="line">    &#125;,</span><br><span class="line">    checkPassword: function()&#123;</span><br><span class="line">        console.log(&apos;checkPassword&apos;)</span><br><span class="line">        return this</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var a = new checkObj()</span><br><span class="line">a.checkName().checkEmail().checkPassword()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;js是超级灵活的语言&quot;&gt;&lt;a href=&quot;#js是超级灵活的语言&quot; class=&quot;headerlink&quot; title=&quot;js是超级灵活的语言&quot;&gt;&lt;/a&gt;js是超级灵活的语言&lt;/h3&gt;&lt;h4 id=&quot;step1&quot;&gt;&lt;a href=&quot;#step1&quot; class=&quot;headerlink&quot; title=&quot;step1&quot;&gt;&lt;/a&gt;step1&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var checkObj = function () &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    checkObj.prototype.checkName = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(&amp;apos;checkName&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;checkObj.prototype.checkEmail = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(&amp;apos;checkEmail&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;checkObj.prototype.checkPassword = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(&amp;apos;checkPassword&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var a = new checkObj()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.checkName()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.checkEmail()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.checkPassword()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js的封装和继承</title>
    <link href="http://yongchao.tech:8080/2019/03/04/js%E5%8E%9F%E5%9E%8B/"/>
    <id>http://yongchao.tech:8080/2019/03/04/js原型/</id>
    <published>2019-03-04T14:20:07.000Z</published>
    <updated>2019-03-05T01:45:28.169Z</updated>
    
    <content type="html"><![CDATA[<p>###　简单介绍<br>谈到JAVASCRIPT的继承，只有一种结构：对象。每个对象都有一个私有属性<strong>proto</strong> 指向它的原型对象(prototype) . 原型对象也有自己的<strong>proto</strong> ,层层向上直到一个对象的原型对象为NULL.根据定义，NULL是没有原型的，并作为这个原型链的最后一个环节。</p><p>！！！ 实例对象的<strong>proto</strong> 等于该对象构造函数的prototype<br>ps:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;</span><br><span class="line">obj.__proto__ === Object.prototype</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var Book = function (id,name, price) &#123;</span><br><span class="line">    // 私有属性</span><br><span class="line">    var num = 1</span><br><span class="line">    // 私有函数</span><br><span class="line">    function checkId()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    // 公有属性</span><br><span class="line">    this.id = id</span><br><span class="line">    this.name = name</span><br><span class="line">    this.price = price</span><br><span class="line">    // 公有函数</span><br><span class="line">    this.getName=function()&#123;&#125;</span><br><span class="line">    this.getPrice = function()&#123;&#125;</span><br><span class="line">    this.setName = function (name)&#123;this.name = name&#125;</span><br><span class="line">    this.setPrice = function(price)&#123;this.price = price&#125;</span><br><span class="line">    this.getNum = function()&#123;return num&#125;</span><br><span class="line">&#125;</span><br><span class="line">//类静态公有属性（对象不能访问）</span><br><span class="line">Book.isChinese = true</span><br><span class="line">//类静态公有方法（对象不能访问）</span><br><span class="line">Book.resetTime = function()&#123;&#125;</span><br><span class="line"></span><br><span class="line">var book = new Book(&apos;adf2323&apos;,&apos;js设计模式&apos;, 232)</span><br><span class="line">console.log(book.name, book.price, book.id)</span><br><span class="line">console.log(book.getNum())</span><br></pre></td></tr></table></figure><p>###　New的作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Function Book(id, name , price) &#123;</span><br><span class="line">    Var this = &#123;&#125;</span><br><span class="line">    This.name = name</span><br><span class="line">    This.id = id</span><br><span class="line">    This.price = price</span><br><span class="line">    Return this</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的原型对象的作用"><a href="#类的原型对象的作用" class="headerlink" title="类的原型对象的作用"></a>类的原型对象的作用</h3><pre><code>继承通过将父类的实例赋值给子类的原型对象。类的原型对象的作用就是为类的原型添加共有方法，但是类并不能直接访问这些函数和方法。当我实例化的时候，新创建的对象复制了父类的构造函数内的属性与方法并且将原型__proto__ 指向父类的原型对象，这样就拥有了父类的原型对象上的属性和方法，并且这个新创建的对象可以访问到父类原型对象上到的属性和方法</code></pre><h3 id="常见的继承的几种方式"><a href="#常见的继承的几种方式" class="headerlink" title="常见的继承的几种方式"></a>常见的继承的几种方式</h3><h4 id="类式继承"><a href="#类式继承" class="headerlink" title="类式继承"></a>类式继承</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//声明父类</span><br><span class="line">function SuperClass()&#123;&#125;</span><br><span class="line">// 为父类添加共有方法</span><br><span class="line">SuperClass.prototype.getSuperValue=function()&#123;&#125;</span><br><span class="line"></span><br><span class="line">//声明子类</span><br><span class="line">function SubClass()&#123;</span><br><span class="line">    this.subValue = false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//继承</span><br><span class="line">SubClass.prototype = new SuperClass();</span><br><span class="line"></span><br><span class="line">// 为子类添加共有方法</span><br><span class="line">SubClass.prototype.getSubValue = function ()&#123;</span><br><span class="line">    return this.subValue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">缺点：由于子类通过其原型prototype 对父类进行实例化，继承了父类。所以说父类中的共有属性如果是引用类型，就会被子类中的所有实例共用，存在被修改的可能。</span><br></pre></td></tr></table></figure><h4 id="构造函数式继承"><a href="#构造函数式继承" class="headerlink" title="构造函数式继承"></a>构造函数式继承</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function SuperClass(id)&#123;</span><br><span class="line">  this.books = [&apos;js&apos;, &apos;html&apos;, &apos;css&apos;]</span><br><span class="line">  this.id = id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperClass.prototype.getSuperValue = function () &#123;</span><br><span class="line">  console.log(&apos;getSuperValue&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function SubClass(id)&#123;</span><br><span class="line">  // 继承父类</span><br><span class="line">  SuperClass.call(this, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">缺点：只继承了父类构造函数中的公有属性。如果一个函数后者变量想要被继承么，就必须放在父类构造函数中，这样创建的每个实例都会单独拥有一份而不能共用，这样违背了代码复用的原则。为了综合这两种模式的有点，后来有了组合式继承。</span><br></pre></td></tr></table></figure><h4 id="组合式继承"><a href="#组合式继承" class="headerlink" title="组合式继承"></a>组合式继承</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function SuperClass(id)&#123;</span><br><span class="line">  // 将公有引用类型放在构造函数中</span><br><span class="line">  this.books = [&apos;js&apos;, &apos;html&apos;, &apos;css&apos;]</span><br><span class="line">  this.id = id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperClass.prototype.getSuperValue = function () &#123;</span><br><span class="line">  console.log(&apos;getSuperValue&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function SubClass(id)&#123;</span><br><span class="line">  // 继承父类中构造函数的属性和方法</span><br><span class="line">  SuperClass.call(this, id)</span><br><span class="line">&#125;</span><br><span class="line">SubClass.prototype = new SuperClass()</span><br><span class="line">SubClass.prototype.getTime = function()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">缺点： </span><br><span class="line">SuperClass.call(this, id)执行了一次父类构造函数</span><br><span class="line">new SuperClass()又执行了一次父类构造函数</span><br></pre></td></tr></table></figure><h4 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function SuperClass(id)&#123;</span><br><span class="line">  // 将公有引用类型放在构造函数中</span><br><span class="line">  this.books = [&apos;js&apos;, &apos;html&apos;, &apos;css&apos;]</span><br><span class="line">  this.id = id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperClass.prototype.getSuperValue = function () &#123;</span><br><span class="line">  console.log(&apos;getSuperValue&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function SubClass(id)&#123;</span><br><span class="line">  // 继承父类中构造函数的属性和方法</span><br><span class="line">  SuperClass.call(this, id)</span><br><span class="line">&#125;</span><br><span class="line">function inherit(subClass, superClass)&#123;</span><br><span class="line">    //定义了一个没有自有属性的对象</span><br><span class="line">    var F = function()&#123;&#125;</span><br><span class="line">    F.prototype = superClass.prototype</span><br><span class="line">    subClass.prototype = new F() // 干净的继承了父类的公有属性</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="补充：inherit函数"><a href="#补充：inherit函数" class="headerlink" title="补充：inherit函数"></a>补充：inherit函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function inherit(p)&#123;</span><br><span class="line">    if(p === null) throw TypeError</span><br><span class="line">    if(Object.create)&#123;</span><br><span class="line">        return Object.create(p)</span><br><span class="line">    &#125;</span><br><span class="line">    let t = typeof p</span><br><span class="line">    if(t !== &quot;object&quot; || t!== &quot;function&quot;) throw TypeError</span><br><span class="line">    function F()&#123;&#125;</span><br><span class="line">    F.prototype = p</span><br><span class="line">    return new F();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###　简单介绍&lt;br&gt;谈到JAVASCRIPT的继承，只有一种结构：对象。每个对象都有一个私有属性&lt;strong&gt;proto&lt;/strong&gt; 指向它的原型对象(prototype) . 原型对象也有自己的&lt;strong&gt;proto&lt;/strong&gt; ,层层向上直到一个对象的原型对象为NULL.根据定义，NULL是没有原型的，并作为这个原型链的最后一个环节。&lt;/p&gt;
&lt;p&gt;！！！ 实例对象的&lt;strong&gt;proto&lt;/strong&gt; 等于该对象构造函数的prototype&lt;br&gt;ps:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var obj = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.__proto__ === Object.prototype&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yongchao.tech:8080/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>nodejs发送邮件</title>
    <link href="http://yongchao.tech:8080/2019/03/04/nodejs%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <id>http://yongchao.tech:8080/2019/03/04/nodejs发送邮件/</id>
    <published>2019-03-04T10:44:17.000Z</published>
    <updated>2019-03-04T09:17:17.022Z</updated>
    
    <content type="html"><![CDATA[<p>使用nodemailer包实现发送邮件<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;)</span><br><span class="line">const nodemailer = require(&apos;nodemailer&apos;)</span><br><span class="line">const app = express()</span><br><span class="line">const PORT = process.env.PORT || 3000</span><br><span class="line"></span><br><span class="line">// 配置163邮箱</span><br><span class="line">let transporter = nodemailer.createTransport(&#123;</span><br><span class="line">  service: &apos;smpt.163.com&apos;,</span><br><span class="line">  host: &apos;smtp.163.com&apos;,</span><br><span class="line">  secureConnection: true,</span><br><span class="line">  port:    465,</span><br><span class="line">  auth: &#123;</span><br><span class="line">    user: &apos;XXXX@163.com&apos;,</span><br><span class="line">    pass: &apos;XXXX&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 配置gmail邮箱</span><br><span class="line">// let transporter  = nodeMailer.createTransport(&apos;SMTP&apos;,&#123;</span><br><span class="line">//   service: &apos;gmail&apos;,</span><br><span class="line">//   host: &apos;smtp.gmail.com&apos;,</span><br><span class="line">//   secure: true,</span><br><span class="line">//   port:465,</span><br><span class="line">//   auth: &#123;</span><br><span class="line">//       //邮箱</span><br><span class="line">//       user: &apos;XXXXXXX@gmail.com&apos;,</span><br><span class="line">//       //登入密码</span><br><span class="line">//       pass: &apos;XXXXXXX&apos;,</span><br><span class="line">//   &#125;   </span><br><span class="line">// &#125;);</span><br><span class="line"></span><br><span class="line">let defaultOpions = &#123;</span><br><span class="line">  from: &apos;XXX@163.com&apos;,</span><br><span class="line">  to: &apos;XXX@qq.com&apos;,</span><br><span class="line">  subject: &apos;主题&apos;,</span><br><span class="line">  text: &apos;内容&apos;,</span><br><span class="line">  html: &apos;&lt;b&gt;内容&lt;/b&gt;&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</span><br><span class="line">  transporter.sendMail(defaultOpions, (err, info) =&gt; &#123;</span><br><span class="line">    if(err) &#123;</span><br><span class="line">      console.error(err)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      console.log(err, info)</span><br><span class="line">    &#125;</span><br><span class="line">    res.send()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(PORT, () =&gt; &#123;</span><br><span class="line">  console.log(&apos;start service&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用nodemailer包实现发送邮件&lt;br&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://yongchao.tech:8080/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>git常用知识点</title>
    <link href="http://yongchao.tech:8080/2019/03/04/git%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yongchao.tech:8080/2019/03/04/git常用知识点/</id>
    <published>2019-03-03T21:43:19.000Z</published>
    <updated>2019-03-05T01:52:56.628Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用的几个命令"><a href="#常用的几个命令" class="headerlink" title="常用的几个命令"></a>常用的几个命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git add</span><br><span class="line">git commit</span><br><span class="line">git status</span><br><span class="line">git diff </span><br><span class="line">git branch</span><br><span class="line">git remote</span><br><span class="line">git pull </span><br><span class="line">git push </span><br><span class="line">git reset</span><br><span class="line">git tag</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="常见的场景"><a href="#常见的场景" class="headerlink" title="常见的场景"></a>常见的场景</h3><h4 id="版本需要回退到旧版本"><a href="#版本需要回退到旧版本" class="headerlink" title="版本需要回退到旧版本"></a>版本需要回退到旧版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、git reset</span><br><span class="line"> git reset --hard &quot;目标版本commmit-id&quot;</span><br><span class="line"> git push origin master -f 暴力，不建议</span><br><span class="line"> 适用场景： 如果想恢复到之前某个提交的版本，且那个版本之后提交的版本我们都不要了，就可以用这种方法。</span><br><span class="line"></span><br><span class="line">2、git revert</span><br><span class="line"> git revert的作用通过反做创建一个新的版本，这个版本的内容与我们要回退到的目标版本一样，但是HEAD指针是指向这个新生成的版本，而不是目标版本。</span><br><span class="line"> git revert -n 版本号</span><br><span class="line"> git commit -m 版本名</span><br><span class="line"> 适用场景： 如果我们想恢复之前的某一版本（该版本不是merge类型），但是又想保留该目标版本后面的版本，记录下这整个版本变动流程，就可以用这种方法。</span><br></pre></td></tr></table></figure><h4 id="拉取远程分支并创建本地分支"><a href="#拉取远程分支并创建本地分支" class="headerlink" title="拉取远程分支并创建本地分支"></a>拉取远程分支并创建本地分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、git checkout -b newBranch origin/remoteBranch</span><br><span class="line">2、git fetch origin remoteBranch:newBranch</span><br><span class="line">3、git checkout -b newBranch --trace origin/remoteBranch</span><br></pre></td></tr></table></figure><h4 id="修改上一次commit的信息，未push到远程分支"><a href="#修改上一次commit的信息，未push到远程分支" class="headerlink" title="修改上一次commit的信息，未push到远程分支"></a>修改上一次commit的信息，未push到远程分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &apos;message&apos; --amend</span><br></pre></td></tr></table></figure><h4 id="忽略对某个文件或者文件夹的的修改"><a href="#忽略对某个文件或者文件夹的的修改" class="headerlink" title="忽略对某个文件或者文件夹的的修改"></a>忽略对某个文件或者文件夹的的修改</h4><p>将文件或者文件夹的名字添加到.gitignore文件</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;常用的几个命令&quot;&gt;&lt;a href=&quot;#常用的几个命令&quot; class=&quot;headerlink&quot; title=&quot;常用的几个命令&quot;&gt;&lt;/a&gt;常用的几个命令&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git add&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git diff &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git pull &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git reset&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git tag&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yongchao.tech:8080/tags/git/"/>
    
  </entry>
  
</feed>
