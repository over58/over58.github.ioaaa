<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yongchao&#39;s blog</title>
  
  <subtitle>A fast, simple &amp; powerful blog framework powered by Node.js.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yongchao.tech:8080/"/>
  <updated>2019-03-28T04:57:59.667Z</updated>
  <id>http://yongchao.tech:8080/</id>
  
  <author>
    <name>yongchao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>执行栈和执行上下文</title>
    <link href="http://yongchao.tech:8080/2019/03/26/%E6%89%A7%E8%A1%8C%E6%A0%88%E5%92%8C%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>http://yongchao.tech:8080/2019/03/26/执行栈和执行上下文/</id>
    <published>2019-03-26T09:57:17.000Z</published>
    <updated>2019-03-28T04:57:59.667Z</updated>
    
    <content type="html"><![CDATA[<p>执行上下文是当前 JavaScript 代码被解析和执行时所在环境的抽象概念。</p><h3 id="执行上下文的类型"><a href="#执行上下文的类型" class="headerlink" title="执行上下文的类型"></a>执行上下文的类型</h3><p>执行上下文总共有三种类型</p><p>  1.全局执行上下文：只有一个，浏览器中的全局对象就是 window 对象，this 指向这个全局对象。</p><p>  2.函数执行上下文：存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文。</p><p>  3.Eval 函数执行上下文： 指的是运行在 eval 函数中的代码，不用很少用而且不建议使用。</p><h3 id="执行栈"><a href="#执行栈" class="headerlink" title="执行栈"></a>执行栈</h3><p>执行栈，也叫调用栈，具有 LIFO（后进先出）结构，用于存储在代码执行期间创建的所有执行上下文。</p><p>首次运行JS代码时，会创建一个全局执行上下文并Push到当前的执行栈中。每当发生函数调用，引擎都会为该函数创建一个新的函数执行上下文并Push到当前执行栈的栈顶。</p><p>根据执行栈LIFO规则，当栈顶函数运行完成后，其对应的函数执行上下文将会从执行栈中Pop出，上下文控制权将移到当前执行栈的下一个执行上下文。</p><h3 id="执行上下文的创建"><a href="#执行上下文的创建" class="headerlink" title="执行上下文的创建"></a>执行上下文的创建</h3><p>执行上下文分两个阶段创建：1）创建阶段； 2）执行阶段</p><p>创建阶段</p><p>1、确定 this 的值，也被称为 This Binding。</p><p>2、LexicalEnvironment（词法环境） 组件被创建。</p><p>3、VariableEnvironment（变量环境） 组件被创建。</p><p>直接看伪代码可能更加直观<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ExecutionContext = &#123;  </span><br><span class="line">  ThisBinding = &lt;this value&gt;,     // 确定this </span><br><span class="line">  LexicalEnvironment = &#123; ... &#125;,   // 词法环境</span><br><span class="line">  VariableEnvironment = &#123; ... &#125;,  // 变量环境</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h4 id="This-Binding"><a href="#This-Binding" class="headerlink" title="This Binding"></a>This Binding</h4><p>全局执行上下文中，this 的值指向全局对象，在浏览器中this 的值指向 window对象，而在nodejs中指向这个文件的module对象。</p><p>函数执行上下文中，this 的值取决于函数的调用方式。具体有：默认绑定、隐式绑定、显式绑定（硬绑定）、new绑定、箭头函数，具体内容会在【this全面解析】部分详解。</p><h4 id="词法环境（Lexical-Environment）"><a href="#词法环境（Lexical-Environment）" class="headerlink" title="词法环境（Lexical Environment）"></a>词法环境（Lexical Environment）</h4><ul><li>Global code:通俗点讲就是源文件代码，就是一个词法环境</li><li>函数代码 ：一个函数块内自己是一个新的词法环境</li><li>eval：进入eval调用的代码有时会创建一个新的词法环境</li><li>with结构：一个with结构块内也是自己一个词法环境</li><li>catch结构：一个catch结构快内也是自己一个词环境</li></ul><blockquote><p>读到这里有些小伙伴急了，“不对，不对，我记得只有在全局代码、函数代码、和eval代码三种情况，才会创建运行上下文，你专门有5种”。对，你说的没错，只有在全局代码、函数代码、和eval代码三种情况，才会创建运行上下文，但我这里说的是词法环境，Lexical Environments。不是运行上下文。</p></blockquote><p>作者：G哥讲码堂<br>链接：<a href="https://juejin.im/post/5c05120be51d4513416d2111" target="_blank" rel="noopener">https://juejin.im/post/5c05120be51d4513416d2111</a><br>来源：掘金</p><p>词法环境有两个组成部分</p><p>1、环境记录：存储变量和函数声明的实际位置</p><h5 id="环境记录分为两种"><a href="#环境记录分为两种" class="headerlink" title="环境记录分为两种"></a>环境记录分为两种</h5><p>  declarative environment records 主要用于函数 、catch词法环境<br>  object environment records.     主要用于with 和global的词法环境</p><p>  declarative environment records可以简单理解为字典类型的结构，key-value形式结论变量等对应的名字和值。<br>  而object environment records会关联一个对象，用这个对象的属性-值来登记变量等对应的名字和值。</p><p>2、对外部环境的引用：可以访问其外部词法环境</p><p>词法环境有两种类型</p><p>1、全局环境：是一个没有外部环境的词法环境，其外部环境引用为 null。拥有一个全局对象（window 对象）及其关联的方法和属性（例如数组方法）以及任何用户自定义的全局变量，this 的值指向这个全局对象。</p><p>2、函数环境：用户在函数中定义的变量被存储在环境记录中，包含了arguments 对象。对外部环境的引用可以是全局环境，也可以是包含内部函数的外部函数环境。</p><p>直接看伪代码可能更加直观<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GlobalExectionContext = &#123;  // 全局执行上下文</span><br><span class="line">  LexicalEnvironment: &#123;          // 词法环境</span><br><span class="line">    EnvironmentRecord: &#123;           // 环境记录</span><br><span class="line">      Type: &quot;Object&quot;,                 // 全局环境</span><br><span class="line">      // 标识符绑定在这里 </span><br><span class="line">      outer: &lt;null&gt;                 // 对外部环境的引用</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FunctionExectionContext = &#123; // 函数执行上下文</span><br><span class="line">  LexicalEnvironment: &#123;        // 词法环境</span><br><span class="line">    EnvironmentRecord: &#123;          // 环境记录</span><br><span class="line">      Type: &quot;Declarative&quot;,         // 函数环境</span><br><span class="line">      // 标识符绑定在这里               // 对外部环境的引用</span><br><span class="line">      outer: &lt;Global or outer function environment reference&gt;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="变量环境"><a href="#变量环境" class="headerlink" title="变量环境"></a>变量环境</h4><p>变量环境也是一个词法环境，因此它具有上面定义的词法环境的所有属性。</p><p>在 ES6 中，词法 环境和 变量 环境的区别在于前者用于存储函数声明和变量（ let 和 const ）绑定，而后者仅用于存储变量（ var ）绑定。</p><p>使用例子进行介绍<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">let a = 20;  </span><br><span class="line">const b = 30;  </span><br><span class="line">var c;</span><br><span class="line"></span><br><span class="line">function multiply(e, f) &#123;  </span><br><span class="line"> var g = 20;  </span><br><span class="line"> return e * f * g;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c = multiply(20, 30);</span><br><span class="line">执行上下文如下所示</span><br><span class="line"></span><br><span class="line">GlobalExectionContext = &#123;</span><br><span class="line"></span><br><span class="line">  ThisBinding: &lt;Global Object&gt;,</span><br><span class="line"></span><br><span class="line">  LexicalEnvironment: &#123;  </span><br><span class="line">    EnvironmentRecord: &#123;  </span><br><span class="line">      Type: &quot;Object&quot;,  </span><br><span class="line">      // 标识符绑定在这里  </span><br><span class="line">      a: &lt; uninitialized &gt;,  </span><br><span class="line">      b: &lt; uninitialized &gt;,  </span><br><span class="line">      multiply: &lt; func &gt;  </span><br><span class="line">    &#125;  </span><br><span class="line">    outer: &lt;null&gt;  </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  VariableEnvironment: &#123;  </span><br><span class="line">    EnvironmentRecord: &#123;  </span><br><span class="line">      Type: &quot;Object&quot;,  </span><br><span class="line">      // 标识符绑定在这里  </span><br><span class="line">      c: undefined,  </span><br><span class="line">    &#125;  </span><br><span class="line">    outer: &lt;null&gt;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FunctionExectionContext = &#123;  </span><br><span class="line"></span><br><span class="line">  ThisBinding: &lt;Global Object&gt;,</span><br><span class="line"></span><br><span class="line">  LexicalEnvironment: &#123;  </span><br><span class="line">    EnvironmentRecord: &#123;  </span><br><span class="line">      Type: &quot;Declarative&quot;,  </span><br><span class="line">      // 标识符绑定在这里  </span><br><span class="line">      Arguments: &#123;0: 20, 1: 30, length: 2&#125;,  </span><br><span class="line">    &#125;,  </span><br><span class="line">    outer: &lt;GlobalLexicalEnvironment&gt;  </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  VariableEnvironment: &#123;  </span><br><span class="line">    EnvironmentRecord: &#123;  </span><br><span class="line">      Type: &quot;Declarative&quot;,  </span><br><span class="line">      // 标识符绑定在这里  </span><br><span class="line">      g: undefined  </span><br><span class="line">    &#125;,  </span><br><span class="line">    outer: &lt;GlobalLexicalEnvironment&gt;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>变量提升的原因：在创建阶段，函数声明存储在环境中，而变量会被设置为 undefined（在 var 的情况下）或保持未初始化（在 let 和 const 的情况下）。所以这就是为什么可以在声明之前访问 var 定义的变量（尽管是 undefined ），但如果在声明之前访问 let 和 const 定义的变量就会提示引用错误的原因。这就是所谓的变量提升。</p><h3 id="执行阶段"><a href="#执行阶段" class="headerlink" title="执行阶段"></a>执行阶段</h3><p>此阶段，完成对所有变量的分配，最后执行代码。</p><p>如果 Javascript 引擎在源代码中声明的实际位置找不到 let 变量的值，那么将为其分配 undefined 值。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;执行上下文是当前 JavaScript 代码被解析和执行时所在环境的抽象概念。&lt;/p&gt;
&lt;h3 id=&quot;执行上下文的类型&quot;&gt;&lt;a href=&quot;#执行上下文的类型&quot; class=&quot;headerlink&quot; title=&quot;执行上下文的类型&quot;&gt;&lt;/a&gt;执行上下文的类型&lt;/h3&gt;&lt;p&gt;执行上下文总共有三种类型&lt;/p&gt;
&lt;p&gt;  1.全局执行上下文：只有一个，浏览器中的全局对象就是 window 对象，this 指向这个全局对象。&lt;/p&gt;
&lt;p&gt;  2.函数执行上下文：存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文。&lt;/p&gt;
&lt;p&gt;  3.Eval 函数执行上下文： 指的是运行在 eval 函数中的代码，不用很少用而且不建议使用。&lt;/p&gt;
&lt;h3 id=&quot;执行栈&quot;&gt;&lt;a href=&quot;#执行栈&quot; class=&quot;headerlink&quot; title=&quot;执行栈&quot;&gt;&lt;/a&gt;执行栈&lt;/h3&gt;&lt;p&gt;执行栈，也叫调用栈，具有 LIFO（后进先出）结构，用于存储在代码执行期间创建的所有执行上下文。&lt;/p&gt;
&lt;p&gt;首次运行JS代码时，会创建一个全局执行上下文并Push到当前的执行栈中。每当发生函数调用，引擎都会为该函数创建一个新的函数执行上下文并Push到当前执行栈的栈顶。&lt;/p&gt;
&lt;p&gt;根据执行栈LIFO规则，当栈顶函数运行完成后，其对应的函数执行上下文将会从执行栈中Pop出，上下文控制权将移到当前执行栈的下一个执行上下文。&lt;/p&gt;
&lt;h3 id=&quot;执行上下文的创建&quot;&gt;&lt;a href=&quot;#执行上下文的创建&quot; class=&quot;headerlink&quot; title=&quot;执行上下文的创建&quot;&gt;&lt;/a&gt;执行上下文的创建&lt;/h3&gt;&lt;p&gt;执行上下文分两个阶段创建：1）创建阶段； 2）执行阶段&lt;/p&gt;
&lt;p&gt;创建阶段&lt;/p&gt;
&lt;p&gt;1、确定 this 的值，也被称为 This Binding。&lt;/p&gt;
&lt;p&gt;2、LexicalEnvironment（词法环境） 组件被创建。&lt;/p&gt;
&lt;p&gt;3、VariableEnvironment（变量环境） 组件被创建。&lt;/p&gt;
&lt;p&gt;直接看伪代码可能更加直观&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ExecutionContext = &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ThisBinding = &amp;lt;this value&amp;gt;,     // 确定this &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  LexicalEnvironment = &amp;#123; ... &amp;#125;,   // 词法环境&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  VariableEnvironment = &amp;#123; ... &amp;#125;,  // 变量环境&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yongchao.tech:8080/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue实现文件下载</title>
    <link href="http://yongchao.tech:8080/2019/03/21/vue%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
    <id>http://yongchao.tech:8080/2019/03/21/vue实现文件下载/</id>
    <published>2019-03-21T10:45:33.000Z</published>
    <updated>2019-03-21T06:30:53.419Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;url&quot; download=&quot;文件名.后缀名&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="实际使用场景"><a href="#实际使用场景" class="headerlink" title="实际使用场景"></a>实际使用场景</h3><p>上面的原理中适合开放的资源下载，http请求中无需验证时使用。在实际使用过程中，a标签中的url中直接设置header比较麻烦且不安全，<br>而且从开发规范上api一般上要封装一下（header中需要一些特定设置），放到统一的文件。</p><p>解决办法：下载相关和api responseType设置为blob(!!!重要)，在以blob形式获取到文件之后js创建一个a标签，设置url和downlaod后并触发，最后释放url资源并删除创建的a标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">api:</span><br><span class="line">downloadFile (url) =&gt; &#123;</span><br><span class="line">  axios.get(url, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    headers: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    // 重要</span><br><span class="line">    responseType: &apos;blob&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">html: </span><br><span class="line">&lt;button @click=&quot;download&quot;&gt;下载&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">js: </span><br><span class="line">  function downlaod (param)&#123;</span><br><span class="line">    api.downloadFile(param).then(data =&gt; &#123;</span><br><span class="line">      if (!data) &#123;</span><br><span class="line">        this.$Message.error(&apos;下载内容为空&apos;)</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line">      let url = window.URL.createObjectURL(new Blob([data]))</span><br><span class="line">      let link = document.createElement(&apos;a&apos;)</span><br><span class="line">      link.style.display = &apos;none&apos;</span><br><span class="line">      link.href = url</span><br><span class="line">      link.setAttribute(&apos;download&apos;, etcdCluster + &apos;.zip&apos;)</span><br><span class="line">        </span><br><span class="line">      document.body.appendChild(link)</span><br><span class="line">      link.click()</span><br><span class="line">      //释放URL对象所占资源</span><br><span class="line">      window.URL.revokeObjectURL(url)</span><br><span class="line">      //用完即删</span><br><span class="line">      document.body.removeChild(link)</span><br><span class="line">    &#125;).catch(err =&gt; &#123;</span><br><span class="line">      console.log(&apos;err: &apos;, err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="MDN相关链接"><a href="#MDN相关链接" class="headerlink" title="MDN相关链接"></a>MDN相关链接</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/revokeObjectURL" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/URL/revokeObjectURL</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yongchao.tech:8080/tags/vue/"/>
    
      <category term="js" scheme="http://yongchao.tech:8080/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue中使用highcharts和echarts的实践</title>
    <link href="http://yongchao.tech:8080/2019/03/21/vue%E4%B8%AD%E4%BD%BF%E7%94%A8highcharts%E5%92%8Cecharts%E7%9A%84%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yongchao.tech:8080/2019/03/21/vue中使用highcharts和echarts的实践/</id>
    <published>2019-03-21T06:30:53.419Z</published>
    <updated>2019-03-21T06:30:53.419Z</updated>
    
    <content type="html"><![CDATA[<p>  我从事云平台前端的开发，由于项目的需要，写了一个云监控Monitor项目。起初，我选择了 Echarts， 原因很简单，中文文档，定制化能力也比较好。事实上，使用了一年多来，用的也是蛮顺手的。但是，这是一个监控项目,里面存在大量的图，每个图有着巨量的数据，而且每条line的名字也超长。带来的问题就是，页面及其卡顿，即使是我限制了每个图中的数据量，仍然无法降低，页面无操作的情况下，CPU仍然占据20%以上（八个图，每个图平均10条line）。网上找了一通，都指向z_render()函数，echarts会不停的执行这个函数。实在是不堪忍受这样的卡顿，在进行了充分调研的情况下,果断换了highcharts。</p><p>  经过实际项目测试：同等数量的情况下，highcharts和echarts 所占的内存相近，但CPU占比很低。举一个栗子，一个页面上有八个图，每个图平均大概10条线，当页面渲染完成，无任何鼠标点击的时候，echarts的CPU占比稳定在20%左右，highcharts始终在1%以下。</p><p><img src="/images/highcharts-q.png" alt="highcharts"><br><img src="/images/echarts-q.png" alt="echarts"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  我从事云平台前端的开发，由于项目的需要，写了一个云监控Monitor项目。起初，我选择了 Echarts， 原因很简单，中文文档，定制化能力也比较好。事实上，使用了一年多来，用的也是蛮顺手的。但是，这是一个监控项目,里面存在大量的图，每个图有着巨量的数据，而且每条lin
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yongchao.tech:8080/tags/vue/"/>
    
      <category term="highcharts" scheme="http://yongchao.tech:8080/tags/highcharts/"/>
    
      <category term="echarts" scheme="http://yongchao.tech:8080/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli3 入门</title>
    <link href="http://yongchao.tech:8080/2019/03/21/%20vue-cli3%E5%85%A5%E9%97%A8/"/>
    <id>http://yongchao.tech:8080/2019/03/21/ vue-cli3入门/</id>
    <published>2019-03-21T06:30:53.415Z</published>
    <updated>2019-03-21T06:30:53.415Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cli.vuejs.org/zh/guide/" target="_blank" rel="noopener">官方文档</a></p><h3 id="1-vue-cli3实现分环境打包步骤"><a href="#1-vue-cli3实现分环境打包步骤" class="headerlink" title="1. vue-cli3实现分环境打包步骤"></a>1. vue-cli3实现分环境打包步骤</h3><p>通过改变 <code>process.env.NODE_ENV</code> 值区分打包环境，但是webpack打包时针对<code>process.env.NODE_ENV===&#39;production&#39;</code> 和其他情况打出来的包结构和大小都不一样；</p><p>为了消除这种差异，可以使用其他变量比如 <code>process.env.VUE_APP_TITLE</code> 来区分环境。<br>XXXXx<br><a id="more"></a></p><p>需求：</p><blockquote><p>打包一个测试环境alpha，该环境的打包和production一样，只是开发中用到的一些变量需要区分环境</p></blockquote><p>说明：</p><ul><li>打包时判断环境还是用<code>process.env.NODE_ENV</code>，我们不用处理</li><li>项目中用到的区分环境的变量我们自己定义</li></ul><p>实施：</p><ol><li><p>package.json中打包命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">···</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;serve&quot;: &quot;vue-cli-service serve&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;vue-cli-service build&quot;,</span><br><span class="line">    &quot;alpha&quot;: &quot;vue-cli-service build --mode alpha&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在项目根目录添加文件.env.alpha”，其内容为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=production</span><br><span class="line">VUE_APP_TITLE=alpha</span><br></pre></td></tr></table></figure></li><li><p>区分环境:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">通过env判断环境</span><br><span class="line">var env = process.env.VUE_APP_TITLE === &apos;alpha&apos; ? &apos;alpha&apos;</span><br><span class="line">      : process.env.NODE_ENV === &apos;production&apos; ? &apos;production&apos; : &apos;development&apos;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><h4 id="2-1-基本配置"><a href="#2-1-基本配置" class="headerlink" title="2.1 基本配置"></a>2.1 基本配置</h4><p>默认 <code>baseUrl: &#39;/&#39;</code> , 再部署环境会报错，需要改成 <code>./</code></p><p>vue.config.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  baseUrl: process.env.NODE_ENV === &apos;production&apos; ? &apos;./&apos; : &apos;/&apos;,</span><br><span class="line">  productionSourceMap: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-2-配置alias"><a href="#2-2-配置alias" class="headerlink" title="2.2. 配置alias"></a>2.2. 配置alias</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">function resolve (dir) &#123;</span><br><span class="line">  return path.join(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  baseUrl: process.env.NODE_ENV === &apos;production&apos; ? &apos;./&apos; : &apos;/&apos;,</span><br><span class="line">  chainWebpack: (config) =&gt; &#123;</span><br><span class="line">    config.resolve.alias</span><br><span class="line">      .set(&apos;styles&apos;, resolve(&apos;src/assets/styles&apos;))</span><br><span class="line">      .set(&apos;components&apos;, resolve(&apos;src/components&apos;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-设置启动端口"><a href="#2-3-设置启动端口" class="headerlink" title="2.3. 设置启动端口"></a>2.3. 设置启动端口</h4><p>默认是8080，被占用时依次累加。注意：mac上普通用户可设置的最小端口是1024，要配置小于1024的端口需要管理员权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    port: 80</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://cli.vuejs.org/zh/guide/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-vue-cli3实现分环境打包步骤&quot;&gt;&lt;a href=&quot;#1-vue-cli3实现分环境打包步骤&quot; class=&quot;headerlink&quot; title=&quot;1. vue-cli3实现分环境打包步骤&quot;&gt;&lt;/a&gt;1. vue-cli3实现分环境打包步骤&lt;/h3&gt;&lt;p&gt;通过改变 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; 值区分打包环境，但是webpack打包时针对&lt;code&gt;process.env.NODE_ENV===&amp;#39;production&amp;#39;&lt;/code&gt; 和其他情况打出来的包结构和大小都不一样；&lt;/p&gt;
&lt;p&gt;为了消除这种差异，可以使用其他变量比如 &lt;code&gt;process.env.VUE_APP_TITLE&lt;/code&gt; 来区分环境。&lt;br&gt;XXXXx&lt;br&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yongchao.tech:8080/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>MySQL常见错误码</title>
    <link href="http://yongchao.tech:8080/2019/03/21/MySQL%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E7%A0%81/"/>
    <id>http://yongchao.tech:8080/2019/03/21/MySQL常见错误码/</id>
    <published>2019-03-21T06:30:53.415Z</published>
    <updated>2019-03-21T06:30:53.415Z</updated>
    
    <content type="html"><![CDATA[<p>0101 属于其他进程的专用标志。<br><br>0102 标志已经设置，无法关闭。<br><br>0103 无法再次设置该标志。<br><br>0104 中断时无法请求专用标志。<br></p><a id="more"></a><p>0105 此标志先前的所有权已终止。<br><br>0106 请将软盘插入驱动器 %1。<br><br>0107 后续软盘尚未插入，程序停止。<br><br>0108 磁盘正在使用或已由其他进程锁定。<br><br>0109 管道已经结束。<br></p><p>0110 系统无法打开指定的设备或文件。<br><br>0111 文件名太长。 0112 磁盘空间不足。<br><br>0113 没有其他可用的内部文件标识符。<br><br>0114 目标内部文件标识符不正确。<br><br>0117 该应用程序所运行的 IOCTL 调用不正确。<br><br>0118 校验写入的开关参数值不正确。<br><br>0119 系统不支持所请求的命令。<br><br>0120 该系统上不支持此功能。<br><br>0121 标记已超时。<br><br>0123 文件名、目录名或卷标语法错误。<br><br>0124 系统调用层不正确。<br><br>0125 磁盘没有卷标。<br><br>0126 找不到指定的模块。<br><br>0127 找不到指定的过程。<br><br>0128 没有要等候的子进程。<br><br>0129 模式下运行。<br><br>0130 试图使用操作(而非原始磁盘I/O)的已打开磁盘分区的文件句柄。<br><br>0131 试图将文件指针移至文件开头之前。<br><br>0132 无法在指定的设备或文件中设置文件指针。<br><br>0133 对于包含已连接驱动器的驱动器，不能使用 JOIN 或 SUBST 命令。<br><br>0134 试图在已经连接的驱动器上使用 JOIN 或 SUBST 命令。<br><br>0135 试图在已经替换的驱动器上使用 JOIN 或 SUBST 命令。<br><br>0136 系统试图删除尚未连接的驱动器的 JOIN。<br><br>0137 系统试图删除尚未替换的驱动器的替换项。<br><br>0138 系统试图将驱动器连接到已连接的驱动器下的目录。<br><br>0139 系统试图将驱动器替换成已替换的驱动器下的目录。<br><br>0140 系统试图将驱动器连接到已替换的驱动器的一个目录中。<br><br>0141 系统试图将驱动器替换成到已连接的驱动器下的目录。<br><br>0142 此时系统无法运行 JOIN 或 SUBST。<br><br>0143 系统无法将驱动器连接到或替换成同一驱动器下的目录。<br><br>0144 此目录不是该根目录的子目录。<br><br>0145 该目录未清空。<br><br>0146 指定的路径已经在替换中使用。<br><br>0147 资源不足，无法执行该命令。<br><br>0148 此时无法使用指定的路径。<br><br>0149 试图连接或替换某个驱动器目录，该驱动器上的某个目录是上一次替换的目标目录。<br><br>0150 CONFIG.SYS 文件未指定系统跟踪信息，或禁止跟踪。<br><br>0151 DosMuxSemWait 的指定信号事件的数目不正确。<br><br>0152 DosMuxSemWait 没有运行；已经设置太多的标志。<br><br>0153 DosMuxSemWait 列表不正确。<br><br>0154 输入的卷标超过目标文件系统的标号字符长度极限。<br><br>0155 无法创建其他线程。<br><br>0156 接收进程拒绝该信号。<br><br>0157 已经放弃该区域，因此无法锁定。<br><br>0158 该区域已经解除锁定。<br><br>0159 线程标识符的地址错误。<br><br>0160 传到 DosExecPgm 的参数字符串错误。<br><br>0161 指定的路径无效。<br><br>0162 信号已挂起。<br><br>0164 系统无法创建其他线程。<br><br>0167 无法锁定文件的范围。<br><br>0170 所要求的资源正在使用中。<br><br>0173 锁定请求对于提供的取消区域不重要。<br><br>0174 文件系统不支持到锁定类型的自动更改。<br><br>0180 系统检测到错误的区域号码。<br></p><p>0182 操作系统无法运行 %1。<br><br>0183 不能创建已经存在的文件。<br><br>0186 传送的标志不正确。<br><br>0187 找不到指定的系统信号名称。<br><br>0188 操作系统无法运行 %1。<br><br>0189 操作系统无法运行 %1。<br><br>0190 操作系统无法运行 %1。<br><br>0191 无法在 Win32 模式下运行 %1。<br><br>0192 操作系统无法运行 %1。<br><br>0193 %1 不是有效的 Win32 应用程序。<br><br>0194 操作系统无法运行 %1。<br><br>0195 操作系统无法运行 %1。<br><br>0196 操作系统无法运行此应用程序。<br><br>0197 当前无法配置操作系统运行此应用程序。<br><br>0198 操作系统无法运行 %1。<br><br>0199 操作系统无法运行此应用程序。<br><br>0200 代码段应小于 64K。<br><br>0201 操作系统无法运行 %1。<br><br>0202 操作系统无法运行 %1。<br><br>0203 系统找不到输入的环境选项。<br><br>0205 在命令子树中的进程没有信号句柄。<br><br>0206 文件名或扩展名太长。<br><br>0207 环 2 堆栈正在使用中。<br><br>0208 输入的全局文件名字符 * 或 ? 不正确，或指定的全局文件名字符太多。 <br><br>0209 所发送的信号不正确。<br><br>0210 无法设置信号处理程序。<br><br>0212 区域已锁定，无法重新分配。<br><br>0214 附加到此程序或动态链接模块的动态链接模块太多。<br><br>0215 无法嵌套调用 LoadModule。<br><br>0216 图像文件 %1 有效，但不适用于本机类型。<br></p><p>0230 管道状态无效。<br><br>0231 所有的管道实例都处于忙状态。<br><br>0232 管道正在关闭。<br><br>0233 在管道的另一端没有进程。<br><br>0234 有更多可用的数据。<br><br>0240 已取消会话。<br><br>0254 指定的扩展属性名无效。<br><br>0255 扩展属性不一致。<br><br>0258 等待操作过时。<br><br>0259 没有其他可用数据。<br><br>0266 无法使用复制功能。<br><br>0267 目录名无效。<br><br>0275 扩展属性不匹配缓冲区。<br><br>0276 所装载的文件系统上的扩展属性文件已被损坏。<br><br>0277 扩展属性表格文件已满。<br><br>0278 指定的扩展属性句柄无效。<br><br>0282 安装的文件系统不支持扩展属性。<br><br>0288 试图释放不属于调用者的多路同步信号。<br><br>0298 信号投递的次数太多。<br><br>0299 仅完成部分 ReadProcessMemory 或 WriteProcessMemory 请求。<br></p><p>0300 操作锁定请求被拒绝。<br><br>0301 系统接收了一个无效的操作锁定确认。<br><br>0317 在 %2 的消息文件中，系统无法找到消息号为 0x%1 的消息文本。<br><br>0487 试图访问无效地址。<br><br>0534 运算结果超过 32 位。<br><br>0535 该管道的另一方有一进程。<br></p><p>0536 等候进程打开管道的另一端。<br><br>0994 拒绝对扩展属性的访问。<br><br>0995 由于线程退出或应用程序的要求，I/O 操作异常终止。<br><br>0996 重叠的 I/O 事件不处于已标记状态。<br><br>0997 正在处理重叠的 I/O 操作。<br><br>0998 对内存位置的无效访问。<br><br>0999 执行页内操作出错。<br><br>1001 递归太深；堆栈溢出。<br><br>1002 窗口无法用来发送消息。<br><br>1003 无法完成此项功能。<br><br>1004 标志无效。<br><br>1005 卷不包含已识别的文件系统。请确认所有需要的文件系统驱动程序都已经加载，而且卷没有任何损坏。<br><br>1006 某文件的卷已在外部改变，因而打开的文件不再有效。<br><br>1007 要求的操作无法以全屏幕模式执行。<br><br>1008 试图引用并不存在的符号。<br><br>1009 配置注册表数据库已损坏。<br><br>1010 配置注册表主键无效。<br><br>1011 无法打开配置注册表主键。<br><br>1012 无法读取配置注册表主键。<br><br>1013 无法写入配置注册表主键。<br><br>1014 必须使用日志文件或其他副本来恢复注册表数据库中的某个文件。恢复成功。 <br><br>1015 注册表已损坏。可能是一个包含注册表数据文件的结构已损坏，也可能内存中该文件的系统映像已损坏，或者因为备份副本（或日志）不存在（或损坏）导致无法恢复该文件。<br><br>1016 由注册表引起的 I/O 操作发生了不可恢复的错误。注册表将不能读取、写出或刷新包含注册表系统映像的其中一个文件。<br><br>1017 系统试图将文件加载或还原到注册表中，但是，指定的文件不是注册表文件格式。<br><br>1018 试图在注册表键（已经标记为删除）中完成的操作非法。<br><br>1019 系统无法在注册表日志文件中分配所需的空间。<br><br>1020 无法在已经有子键或键值的注册表项中创建符号链接。<br><br>1021 在易失的父键下不能创建固定的子键。<br><br>1022 通知的更改请求已经完成，并且返回信息还没有被送到调用者的缓冲区中。调用者需要列举所有文件以找到改动的内容。<br><br>1051 已将停止控制发送给与其他运行服务相关的服务。<br><br>1052 所要求的控制对此服务无效。<br><br>1053 服务没有及时地响应启动或控制请求。<br><br>1054 无法为该服务创建线程。<br><br>1055 服务数据库已锁定。<br><br>1056 该服务的实例已在运行。<br><br>1057 帐户名无效或者不存在，或者指定帐户名的密码无效。<br><br>1058 服务无法启动，可能因为被禁用，也可能因为没有关联的可用设备。<br><br>1059 已经指定了循环服务的从属关系。<br><br>1060 指定的服务不是所安装的服务。<br><br>1061 该服务此时无法接收控制消息。<br><br>1062 服务尚未启动。<br><br>1063 服务进程无法连接到服务控制程序。<br><br>1064 处理控制请求时，服务出现意外情况。<br><br>1065 指定的数据库不存在。<br><br>1066 服务返回服务特定的错误码。<br><br>1067 进程意外地终止。<br></p><p>1068 无法启动从属服务或组。<br><br>1069 由于登录失败，没有启动服务。<br><br>1070 启动后，服务保持在启动挂起状态。<br><br>1071 指定的服务数据库锁定无效。<br><br>1072 指定的服务已经标记为删除。<br><br>1073 指定的服务已经存在。<br><br>1074 系统当前正以上一次运行成功的配置运行。<br><br>1075 从属服务不存在，或已经标记为删除。<br><br>1076 已接受使用当前引导作为最后的有效控制设置。<br><br>1077 自从上一次启动以后，没有再次启动过该服务。<br><br>1078 该名称已经用作服务名或服务显示名。<br><br>1079 此服务的帐户不同于运行于同一进程上的其它服务的帐户。<br><br>1080 只能为 Win32 服务设置失败操作，不能为驱动程序设置。<br><br>1081 这个服务所运行的进程和服务控制管理器相同。所以，如果服务进程意外中止的话，服务控制管理器无法进行任何操作。<br><br>1082 这个服务没有设置恢复程序。<br><br>1083 配置成在该可执行程序中运行的这个服务不能执行该服务。<br><br>1100 已经到达磁带的物理尽头。<br><br>1101 磁带访问到文件标记。<br><br>1102 到达磁带或分区首部。<br><br>1103 磁带访问到文件组的末尾。<br><br>1104 磁带上没有其他数据。<br><br>1105 磁带无法分区。<br><br>1106 访问多重卷分区的新磁带时，当前的区块大小不正确。<br><br>1107 加载磁带时，找不到磁带分区信息。<br><br>1108 无法锁定媒体退出功能。<br><br>1109 无法卸载媒体。<br><br>1110 驱动器中的媒体已经更改。<br><br>1111 已经复位 I/O 总线。<br><br>1112 驱动器中没有媒体。<br><br>1113 在目标多字节代码页中不存在对单码字符的映射。<br><br>1114 动态链接库 (DLL) 初始化例程失败。<br><br>1115 正在关闭系统。<br><br>1116 无法终止系统关机，因为没有进行中的关机操作。<br><br>1117 由于 I/O 设备出现错误，无法运行该请求。<br><br>1118 串行设备初始化失败。将卸载串行驱动程序。<br><br>1119 无法打开正与其他设备共享中断请求 (IRQ) 的设备。至少有一个使用该 IRQ 的设备已经打开。<br><br>1120 由于再次写入串行口，串行 I/O 操作已结束。（IOCTL_SERIAL_XOFF_COUNTER 为零。）<br><br>1121 由于超时，串行 I/O 操作已结束。 (IOCTL_SERIAL_XOFF_COUNTER未达到零。)<br><br>1122 在软盘上找不到标识符地址标记。<br><br>1123 软盘扇区标识符字段与软盘控制器磁道地址不匹配。<br><br>1124 软盘控制器报告软盘驱动程序不能识别的错误。<br><br>1125 软盘控制器返回的结果和注册的不一致。<br></p><p>1126 访问硬盘时，再校准操作失败，再试一次后也无法操作。<br><br>1127 访问硬盘时，磁盘操作失败，再试一次后仍没有作用。<br><br>1128 访问硬盘时，需要重启动磁盘控制器，但仍未成功。<br><br>1129 磁带已卷到尽头。<br><br>1130 可用的服务器存储区不足，无法执行该命令。<br><br>1131 检测到潜在的死锁情况。<br><br>1132 指定的基址或文件偏移量没有正确对齐。<br><br>1140 试图更改系统电源状态的操作被另一应用程序或驱动程序禁止。<br><br>1141 系统 BIOS 无法更改系统电源状态。<br><br>1142 试图在一文件上创建超过系统允许数额的链接。<br><br>1150 指定的程序需要新的 Windows 版本。<br><br>1151 指定的程序不是 Windows 或 MS-DOS 程序。<br><br>1152 无法启动指定程序的多个实例。<br><br>1153 指定的程序是为 Windows 的早期版本编写的。<br><br>1154 运行此应用程序所需的某个库文件已损。<br><br>1155 没有应用程序与该操作中所指定的文件关联。<br><br>1156 将命令发送到应用程序时出现错误。<br><br>1157 找不到运行此应用程序所需的某个库文件。<br><br>1158 当前进程已使用了 Window 管理器对象的系统允许的所有句柄。<br><br>1159 消息只能与同步操作一起使用。<br><br>1160 指出的源元素没有媒体。<br><br>1161 指出的目标元素已包含媒体。<br><br>1162 指出的元素不存在。<br><br>1163 指出的元素是未显示的存储资源的一部分。<br><br>1164 指出的设备需要重新初始化，因为硬件有错误。<br><br>1165 设备显示在尝试进一步操作之前需要清除。<br><br>1166 设备显示它的门仍是打开状态。<br><br>1167 设备没有连接。<br><br>1168 找不到元素。<br><br>1169 索引中没有同指定项相匹配的项。cool 1170 在对象上不存在指定的属性集。<br><br>1171 传递到 GetMouseMovePoints 的点不在缓冲区中。<br><br>1172 跟踪(工作站)服务没运行。<br><br>1173 找不到卷 ID。<br><br>1175 无法删除要被替换的文件。<br><br>1176 无法将替换文件移到要被替换的文件。要被替换的文件保持原来的名称。 <br><br>1177 无法将替换文件移到要被替换的文件。要被替换的文件已被重新命名为备份名称。<br><br>1178 卷更改记录被删除。<br><br>1179 卷更改记录服务不处于活动中。<br><br>1180 找到一份文件，但是可能不是正确的文件。<br><br>1181 日志项已从日志中删除。<br><br>1200 指定的设备名无效。<br></p><p>1201 设备当前虽然未连接，但它是记忆连接。<br><br>1202 试图记起已经记住的设备。<br><br>1203 网络供应商不接受给定的网络路径。<br><br>1204 指定的网络供应商名无效。<br><br>1205 无法打开网络连接配置文件。<br><br>1206 网络连接配置文件已损坏。<br><br>1207 无法列举非包容类。<br><br>1208 出现扩展错误。<br><br>1209 指定组名的格式无效。<br><br>1210 指定计算机名的格式无效。<br><br>1211 指定事件名的格式无效。<br><br>1212 指定域名的格式无效。<br><br>1213 指定服务名的格式无效。<br><br>1214 指定网络名的格式无效。<br><br>1215 指定共享名的格式无效。<br><br>1216 指定密码的格式无效。<br><br>1217 指定的邮件名无效。<br><br>1218 指定邮件目的地的格式无效。<br><br>1219 所提供的凭据与现有凭据设置冲突。<br><br>1220 试图与网络服务器建立会话，但目前与该服务器建立的会话太多。<br><br>1221 网络上的其他计算机已经使用该工作组或域名。<br><br>1222 网络不存在或者没有启动。<br><br>1223 用户已经取消该操作。<br><br>1224 所要求的操作无法在已经打开用户映射区域的文件中运行。<br><br>1225 远程系统拒绝网络连接。<br><br>1226 已经关闭网络连接。<br><br>1227 网络传输的终点已经有一个地址与其关联。<br><br>1228 网络终点尚未与地址关联。<br><br>1229 试图在不存在的网络连接中操作。<br><br>1230 试图在活动的网络连接上进行无效操作。<br><br>1231 不能访问网络位置。有关网络疑难解答的信息，请参阅 Windows帮助。<br><br>1232 不能访问网络位置。有关网络疑难解答的信息，请参阅Windows 帮助。<br><br>1233 不能访问网络位置。有关网络疑难解答的信息，请参阅 Windows 帮助。<br><br>1234 远程系统的目标网络端点没有运行任何服务。<br><br>1235 该请求已经终止。<br><br>1236 本地系统已经终止网络连接。<br><br>1237 无法完成操作。请再试一次。<br><br>1238 无法创建到该服务器的连接，因为已经到达了该帐户同时连接的最大数目。<br><br>1239 试图在该帐户未授权的时间内登录。<br><br>1240 尚未授权此帐户从该站登录网络。<br><br>1241 网络地址无法用于要求的操作。<br><br>1242 服务已经注册。<br><br>1243 指定的服务不存在。<br></p><p>1244 由于尚未验证用户身份，无法执行要求的操作。<br><br>1245 由于用户尚未登录网络，无法运行要求的操作。指定的服务不存在。<br><br>1246 继续工作。<br><br>1247 完成初始化操作后，试图再次运行初始化操作。<br><br>1248 没有其他本地设备。<br><br>1249 指定的站点不存在。<br><br>1250 具有指定名称的域控制器已经存在。<br><br>1251 只有连接到服务器上时，才支持该操作。<br><br>1252 即使没有改动，组策略框架也应该调用扩展。<br><br>1253 指定的用户没有一个有效的配置文件。<br><br>1254 Microsoft Small Business Server 不支持此操作。<br><br>1300 不是对所有的调用方分配引用特权。<br><br>1301 帐户名与安全标识符之间的映射未完成。<br><br>1302 没有为该帐户明确地设置系统配额限制。<br><br>1303 没有可用的密钥。返回已知的密钥。<br><br>1304 密码太复杂，无法转换成 LAN Manager 密码。返回的 LANManager 密码是空字符串。<br><br>1305 修订级别未知。<br><br>1306 表示两个修订级别不兼容。<br><br>1307 无法将此安全标识符指定为该对象的拥有者。<br><br>1308 无法将此安全标识符指定为主要的对象组。<br><br>1309 当前并未模拟客户的线程试图操作模拟令牌。<br><br>1310 不可以禁用该组。<br><br>1311 目前没有可用的登录服务器处理登录请求。<br><br>1312 指定的登录会话不存在。该会话可能已终止。<br><br>1313 指定的权限不存在。<br><br>1314 客户不保留请求的权限。<br><br>1315 提供的名称不是正确的帐户名称格式。<br><br>1316 指定的用户已经存在。<br><br>1317 指定的用户不存在。<br><br>1318 指定的组已经存在。<br><br>1319 指定的组不存在。<br><br>1320 或者指定的用户帐户已经是某个特定组的成员，或者也可能指定的组非空而不能被删除。<br><br>1321 指定的用户帐户不是所指定组帐户的成员。<br><br>1322 上次保留的管理帐户无法关闭或删除。<br><br>1323 无法更新密码。所输入的密码不正确。<br><br>1324 无法更新密码。所提供的新密码包含不可用于密码的值。<br><br>1325 无法更新密码。为新密码提供的值不符合字符域的长度、复杂性或历史要求。 1326 登录失败: 用户名未知或密码错误。<br><br>1327 登录失败: 用户帐户限制。<br><br>1328 登录失败: 违反帐户登录时间限制。<br><br>1329 登录失败: 禁止用户登录到该计算机上。<br><br>1330 登录失败: 指定的帐户密码已过期。<br><br>1331 登录失败: 当前禁用帐户。<br><br>1332 未完成帐户名与安全性标识符之间的映射。<br><br>1333 一次请求的本地用户标识符(LUID)太多。<br><br>1334 没有其他可用的本地用户标识符(LUID)。<br><br>1335 对这个特定使用来说，安全标识符的子部分是无效的。<br><br>1336 访问控制清单(ACL)结构无效。<br><br>1337 安全标识符结构无效。<br><br>1338 安全描述符结构无效。<br><br>1340 无法创建继承的访问控制列表(ACL)或访问控制项目(ACE)。<br><br>1341 当前已禁用服务器。<br><br>1342 当前已启用服务器。<br><br>1343 所提供的值是无效的标识符授权值。<br><br>1344 没有更多的内存用于更新安全信息。<br><br>1345 指定的属性无效，或指定的属性与整个组的属性不兼容。<br><br>1346 或者没有提供所申请的模仿级别，或者提供的模仿级别无效。<br><br>1347 无法打开匿名级安全性符号。<br><br>1348 所请求的验证信息类别无效。<br><br>1349 该类符号不能以所尝试的方式使用。<br><br>1350 无法在没有相关安全性的对象上运行安全操作。<br><br>1351 未能从域控制器读取配置信息，或者是因为机器不可使用，或者是访问被拒绝。<br><br>1352 安全帐户管理程序(SAM)或本地安全颁发机构(LSA)服务器状态不正确，所以无法运行安全操作。<br><br>1353 域处于执行安全操作的错误状态。<br><br>1354 该操作只能在域的主域控制器中执行。<br><br>1355 指定的域不存在或联系不上。<br><br>1356 指定的域已经存在。<br><br>1357 试图超过每个服务器域数目的极限。<br><br>1358 由于严重的媒体错误或磁盘的数据结构损坏，无法完成所请求的操作。<br><br>1359 发生内部错误。<br><br>1360 通用的访问类型包含在访问掩码中，该掩码已经映射为非通用类型。<br><br>1361 安全性描述符的格式错误（绝对或自相关）。<br><br>1362 请求的操作只准登录进程使用。该调用过程并未被记录为登录进程。<br><br>1363 无法用已经使用的标识符来启动新的登录会话。<br><br>1364 指定的确认数据包未知。<br><br>1365 登录会话的状态与请求的操作不一致。<br><br>1366 登录会话标识符正在使用中。<br><br>1367 登录请求包含无效的登录类型值。<br></p><p>1368 在使用命名管道读取数据之前，无法经由该管道模拟。<br><br>1369 注册表子树的事务状态与所请求的操作不兼容。<br><br>1370 突发的内部安全性数据库故障。<br><br>1371 无法在内部帐户下运行该操作。<br><br>1372 无法在该内部特定组中运行该操作。<br><br>1373 无法在该内部特定用户中运行该操作。<br><br>1374 因为该组当前是用户的主要组，所以不能从此组中删除用户。<br><br>1375 该符号已作为主要符号使用。<br><br>1376 指定的本地组不存在。<br><br>1377 指定的帐户名不是本地组的成员。<br><br>1378 指定的帐户名已经是本地组的成员。<br><br>1379 指定的本地组已经存在。<br><br>1380 登录失败: 用户在本计算机上没有被授与所需注册类型。<br><br>1381 超过了可以存储在单个系统中的最大机密限制。<br><br>1382 机密的长度超过了最大允许值。<br><br>1383 本地安全授权数据库包含内部不一致的错误。<br><br>1384 登录时，用户的安全性上下文累积太多的安全标识符。<br><br>1385 登录失败: 用户在本计算机上没有被授与所需注册类型。<br><br>1386 经交叉加密的密码必须更改用户密码。<br><br>1387 成员不存在，因此无法将其添加到本地组或从中删除。<br><br>1388 新成员的帐户类型有误，因此无法将其添加到本地组。<br><br>1389 指定的安全标识符太多。<br><br>1390 经交叉加密的密码必须更改该用户密码。<br><br>1391 表示 ACL 没有可继承的组件。<br><br>1392 文件或目录已损坏，无法读取数据。<br><br>1393 磁盘结构已损坏，无法读取数据。<br><br>1394 指定的登录会话没有用户会话密钥。<br><br>1395 正在访问的服务允许特定数目的连接。因为连接的数目已达到服务可接受的数目，所以此时无法创建新的服务连接。<br><br>1396 登录失败: 该目标帐户名称不正确。 1397 相互身份验证失败。该服务器在域控制器的密码过期。<br><br>1398 在客户机和服务器之间有一个时间差。<br><br>1400 窗口句柄无效。<br><br>1401 菜单句柄无效。<br><br>1402 光标句柄无效。<br><br>1403 加速键表的句柄无效。<br><br>1404 挂接句柄无效。<br><br>1405 多重窗口位置结构句柄无效。<br><br>1406 无法创建最上层的子窗口。<br><br>1407 找不到窗口类。<br><br>1408 窗口无效；属于其他线程。<br><br>1409 已经注册热键。<br><br>1410 类已经存在。<br><br>1411 类不存在。<br><br>1412 类窗口仍打开着。<br><br>1413 索引无效。<br><br>1414 图标句柄无效。<br><br>1415 使用私人对话框窗口字。<br><br>1416 找不到列表框标识符。<br><br>1417 找不到任何通配符。<br><br>1418 线程没有打开剪贴板。<br><br>1419 尚未注册热键。<br><br>1420 该窗口不是有效的对话框窗口。<br><br>1421 找不到控制标识符。<br></p><p>1422 由于没有编辑控制，因此该组合框的消息无效。<br><br>1423 窗口不是组合框。<br><br>1424 高度必须小于 256。<br><br>1425 设备上下文(DC)句柄无效。<br><br>1426 挂接过程类型无效。<br><br>1427 挂接过程无效。<br><br>1428 不能在无模块句柄的情况下设置非本地的挂接。<br><br>1429 只能全局设置该挂接过程。<br><br>1430 已安装日记挂接过程。<br><br>1431 未安装挂接过程。<br><br>1432 单选列表框的消息无效。<br><br>1433 LB_SETCOUNT 发送到活动的列表框。<br><br>1434 该列表框不支持制表符。<br><br>1435 无法破坏由其他线程所创建的对象。<br><br>1436 子窗口不能有菜单。 <br><br>1437 窗口没有系统菜单。<br><br>1438 消息框样式无效。<br><br>1439 系统范围内的(SPI_<em>)的参数无效。<br><br>1440 屏幕已经锁定。<br><br>1441 多重窗口位置结构中所有窗口句柄必须具有相同的父窗口。<br><br>1442 窗口不是子窗口。<br><br>1443 GW_</em> 命令无效。<br><br>1444 线程标识符无效。<br><br>1445 无法处理非多文档接口(MDI)窗口的消息。<br><br>1446 弹出式菜单已激活。<br><br>1447 窗口没有滚动条。<br><br>1448 滚动条范围不能大于 MAXLONG。<br><br>1449 无法以指定的方式显示或关闭窗口。<br><br>1450 系统资源不足，无法完成所请求的服务。<br><br>1451 系统资源不足，无法完成所请求的服务。<br><br>1452 系统资源不足，无法完成所请求的服务。<br><br>1453 配额不足，无法完成请求的服务。<br><br>1454 配额不足，无法完成请求的服务。<br><br>1455 页面交换文件太小，无法完成此项操作。<br><br>1456 找不到菜单项。<br><br>1457 键盘布局句柄无效。<br><br>1458 不允许使用挂钩类型。<br><br>1459 该操作需要交互式窗口工作站。<br><br>1460 由于超时时间已过，该操作返回。<br>1461 无效监视器句柄。<br><br>1500 事件日志文件已损坏。<br><br>1501 无法打开事件日志文件，因此无法启动事件记录服务。<br><br>1502 事件日志文件已满。<br></p><p>1503 事件日志文件在两次读取操作间已发生变化。<br><br>1601 无法访问 Windows 安装服务。请与技术支持人员联系，确认Windows 安装服务是否注册正确。<br><br>1602 用户取消了安装。<br><br>1603 安装时发生严重错误。<br><br>1604 安装已挂起，未完成。<br><br>1605 这个操作只对当前安装的产品有效。<br><br>1606 功能 ID 未注册。<br><br>1607 组件 ID 未注册。<br><br>1608 未知属性。<br><br>1609 句柄处于不正确的状态。<br><br>1610 这个产品的配置数据已损坏。请与技术支持人员联系。<br><br>1611 组件限制语不存在。<br><br>1612 这个产品的安装来源无法使用。请验证来源是否存在，是否可以访问。<br><br>1613 Windows 安装服务无法安装这个安装程序包。您必须安装含有Windows 安装服务新版本的 Windows Service Park。<br><br>1614 产品已卸载。<br><br>1615 SQL 查询语法不正确或不被支持。<br><br>1616 记录字符域不存在。<br><br>1617 设备已被删除。<br><br>1618 正在进行另一个安装操作。请在继续这个安装操作之前完成那个操作。<br><br>1619 未能打开这个安装程序包。请验证程序包是否存在，是否可以访问；或者与应用程序供应商联系，验证这是否是有效的 Windows 安装程序包。<br><br>1620 未能打开这个安装程序包。请与应用程序供应商联系，验证这是否是有效的 Windows 安装程序包。<br><br>1621 启动 Windows 安装服务用户界面时有错误。请与技术支持人员联系。 1622 打开安装日志文件时出错。请验证指定的日志文件位置是否存在，是否可以写入。<br><br>1623 安装程序包的语言不受系统支持。<br><br>1624 应用变换时出错。请验证指定的变换路径是否有效。<br><br>1625 系统策略禁止这个安装。请与系统管理员联系。<br><br>1626 无法执行函数。<br><br>1627 执行期间，函数出了问题。<br><br>1628 指定了无效的或未知的表格。<br><br>1629 提供的数据类型不对。<br><br>1630 这个类型的数据不受支持。<br><br>1631 Windows 安装服务未能启动。请与技术支持人员联系。<br><br>1632 临时文件夹已满或无法使用。请验证临时文件夹是否存在，是否可以写入。<br><br>1633 这个处理器类型不支持该安装程序包。请与产品供应商联系。<br><br>1634 组件没有在这台计算机上使用。<br><br>1635 无法打开修补程序包。请验证修补程序包是否存在，是否可以访问；或者与应用程序供应商联系，验证这是否是有效的 Windows 安装修补程序包。<br><br>1636 无法打开修补程序包。请与应用程序供应商联系，验证这是否是有效的 Windows 安装修补程序包。<br><br>1637 Windows 安装服务无法处理这个修补程序包。您必须安装含有Windows 安装服务新版本的 Windows Service Pack。<br><br>1638 已安装这个产品的另一个版本。这个版本的安装无法继续。要配置或删除这个产品的现有版本，请用“控制面板”上的“添加/删除程序”。<br><br>1639 无效的命令行参数。有关详细的命令行帮助，请查阅 Windows 安装服务的 SDK。<br><br>1640 在终端服务远程会话期间，只有管理员有添加、删除或配置服务器软件的权限。如果您要在服务器上安装或配置软件，请与网络管理员联系。<br><br>1641 要求的操作已成功结束。要使改动生效，必须重新启动系统。<br><br>1642 Windows 安装服务无法安装升级修补程序，因为被升级的程序丢失，或者升级修补程序将更新此程序的其他版本。请确认要被升级的程序在您的计算机上且您的升级修补程序是正确的。<br><br>1700 串绑定无效。cool 1701 绑定句柄的类型错误。<br><br>1702 绑定句柄无效。<br><br>1703 不支持 RPC 协议顺序。<br><br>1704 RPC 协议序列无效。<br><br>1705 字符串的全球唯一标识符(UUID)无效。<br><br>1706 终点的格式无效。<br><br>1707 网络地址无效。<br><br>1708 未找到终点。<br><br>1709 超时设置值无效。<br><br>1710 找不到该对象的全球唯一标识符(UUID)。<br><br>1711 该对象的全球唯一标识符(UUID)已经注册。<br><br>1712 这一类型的全球唯一标识符(UUID)已经注册。<br><br>1713 RPC 服务器正在监听。<br><br>1714 尚未注册协议顺序。<br><br>1715 RPC 服务器不处于监听状态。<br><br>1716 管理程序的类型未知。<br><br>1717 接口未知。<br><br>1718 没有绑定。<br><br>1719 没有协议序列。<br><br>1720 无法创建终点。<br><br>1721 资源不足，无法完成该操作。<br><br>1722 RPC 服务器无法使用。<br><br>1723 RPC 服务器太忙，无法完成此项操作。<br><br>1724 网络选项无效。<br><br>1725 该线程中不存在活动的远程过程调用。<br><br>1726 远程过程调用失败。<br><br>1727 远程过程调用失败并且无法执行。<br><br>1728 远程过程调用(RPC)协议出现错误。<br><br>1730 RPC 服务器不支持传输语法。<br><br>1732 不支持这种类型的全球唯一标识符。<br><br>1733 标识无效。<br><br>1734 数组边界无效。<br><br>1735 绑定类型中不包含项目名。<br><br>1736 名称语法无效。<br></p><p>1737 不支持这种命名语法。<br><br>1739 没有可用的网络地址，无法创建全球唯一标识符(UUID)。<br><br>1740 终结点重复。<br><br>1741 身份验证类型未知。<br><br>1742 调用次数的上限太小。<br><br>1743 字符串太长。<br><br>1744 找不到 RPC 协议序列。<br><br>1745 过程号超出范围。<br><br>1746 此次绑定不包含任何身份验证信息。<br><br>1747 身份验证服务未知。<br><br>1748 身份验证级别未知。<br><br>1749 安全描述符无效。<br><br>1750 身份验证服务未知。<br><br>1751 项目无效。<br><br>1752 服务器的终结点无法执行此项操作。<br><br>1753 终点的映射器没有更多的终点可用。<br><br>1754 没有导出任何接口。<br><br>1755 项目名不完整。<br><br>1756 版本选项无效。<br><br>1757 没有其他成员。<br><br>1758 可以导出全部内容。<br><br>1759 未找到接口。<br><br>1760 项目已经存在。<br><br>1761 项目找不到。<br><br>1762 名称服务不可用。<br><br>1763 网络地址集无效。<br><br>1764 不支持请求的操作。<br><br>1765 没有可供冒仿的安全性描述符。<br><br>1766 远程过程调用(RPC)出现内部错误。<br><br>1767 RPC 服务器企图进行整除零运算。<br><br>1768 RPC 服务器出现寻址错误。<br><br>1769 RPC 服务器中的浮点运算造成被零除。<br><br>1770 RPC 服务器产生了浮点下溢错误。<br><br>1771 RPC 服务器产生了浮点上溢错误。<br><br>1772 可用于自动句柄绑定的 RPC 服务器列表已经用完。<br><br>1773 无法打开字符转换表文件。<br><br>1774 包含字符转换表的文件小于 512 个字节。<br><br>1775 在远程过程调用中，客户机向主机传送了一个空的描述体句柄。<br><br>1777 远程过程调用中的描述体句柄发生变化。<br><br>1778 发送到远程过程调用的绑定句柄不匹配。<br><br>1779 占位程序无法获得远程过程调用的句柄。<br><br>1780 将空的参考指针发送给占位程序。<br><br>1781 列举值超出范围。<br><br>1782 字节数目太小。<br><br>1783 占位程序接收到错误数据。<br><br>1784 所提供的用户缓冲区对所申请的操作无效。<br><br>1785 无法识别磁盘媒体。它可能还未格式化。<br><br>1786 工作站没有信任密码。<br></p><p>1787 服务器上的安全数据库中没有该工作站信任关系的计算机帐户。<br><br>1788 建立主域和受托域间的信任关系失败。<br><br>1789 建立工作站和主域间的信任关系失败。<br><br>1790 网络登录失败。<br><br>1791 该线程执行过程中已经进行了远程过程调用。<br><br>1792 试图登录网络，但网络登录服务尚未启动。<br><br>1793 用户帐户已到期。<br><br>1794 重定向程序正在使用，无法卸载。<br><br>1795 已经安装所指定的打印机驱动程序。<br><br>1796 指定的端口未知。<br><br>1797 打印机驱动程序未知。<br><br>1798 打印处理程序未知。<br><br>1799 指定的分隔符文件无效。<br><br>1800 指定的优先级无效。<br><br>1801 打印机名无效。<br><br>1802 打印机已经存在。<br><br>1803 打印机命令无效。<br><br>1804 指定的数据类型无效。<br><br>1805 指定的环境无效。<br><br>1806 没有其他绑定。<br><br>1807 使用的帐户是跨网络的信任帐户。请使用全局用户帐户或本地用户帐户来访问此服务器。<br><br>1808 所使用的帐户是计算机帐户。请使用全局用户帐户或本地用户帐户来访问该服务器。<br><br>1809 使用的帐户是服务器信任帐户。请使用全局用户帐户或本地用户帐户来访问该服务器。<br><br>1810 指定的域名或安全标识符与域的信任信息不一致。<br><br>1811 服务器正在使用中，无法卸载。<br><br>1812 指定的映像文件不包含资源部分。<br><br>1813 在映像文件中找不到指定的资源类型。<br><br>1814 在映像文件中找不到指定的资源名称。<br><br>1815 在映像文件中找不到指定的资源语言 ID 。<br><br>1816 可用的配额不足，无法执行该命令。<br><br>1817 没有已注册的接口。<br><br>1818 远程过程调用被取消。<br><br>1819 绑定句柄不包含所有需要的信息。<br><br>1820 远程调用过程中发生通讯失败。<br><br>1821 所需的身份验证级别不被支持。<br><br>1822 主要的名称没有注册。<br><br>1823 指定的错误不是有效的 Windows RPC 错误代码。<br><br>1824 已分配仅在本机上有效的 UUID。<br><br>1825 产生了特定的安全包错误。<br><br>1826 没有取消线程。<br></p><p>1827 在编码/解码处理时的操作无效。<br><br>1828 序列化软件包的版本不兼容。<br><br>1829 RPC 占位程序的版本不兼容。<br><br>1830 RPC 管道对象无效或已损坏。<br><br>1831 试图在 RPC 管道对象上进行无效操作。<br><br>1832 不被支持的 RPC 管道版本。<br><br>1898 找不到组成员。<br><br>1899 无法创建终结点映射数据库条目。<br><br>1900 对象的全球标识符(UUID)为空。<br><br>1901 指定的时间无效。<br><br>1902 指定的表单名无效。<br><br>1903 指定的表单大小无效。<br><br>1904 指定的打印机句柄正在等候处理<br><br>1905 指定的打印机已经删除。<br><br>1906 打印机的状态无效。<br><br>1907 用户首次登录前，必须先更改其密码。<br><br>1908 找不到该域的域控制器。<br><br>1909 引用的帐户目前被锁定，可能无法登录。<br><br>1910 没有发现指定的此对象导出者。<br><br>1911 没有发现指定的对象。<br><br>1912 没有发现指定的对象解析器。<br><br>1913 一些待发数据仍停留在请求缓冲区内。<br><br>1914 无效的异步远程过程调用句柄。<br><br>1915 这个操作的异步 RPC 调用句柄不正确。<br><br>1916 RPC 管道对象已经关闭。<br><br>1917 RPC 调用在全部的管道都被处理之前完成。<br><br>1918 没有其他可用的数据来自 RPC 管道。<br><br>1919 这个机器没有可用的站点名。<br><br>1920 系统无法访问此文件。<br><br>1921 系统无法解析文件名。<br><br>1922 项目不是所要的类型。<br><br>1923 无法将所有对象的 UUID 导出到指定的项。<br><br>1924 无法将接口导出到指定的项。<br><br>1925 无法添加指定的配置文件项。<br><br>1926 无法添加指定的配置文件元素。<br><br>1927 无法删除指定的配置文件元素。<br><br>1928 无法添加组元素。<br><br>1929 无法删除组元素。 mysql的出错代码表，根据mysql的头文件<br></p><p>1005：创建表失败<br><br>1006：创建数据库失败<br><br>1007：数据库已存在，创建数据库失败<br><br>1008：数据库不存在，删除数据库失败<br><br>1009：不能删除数据库文件导致删除数据库失败<br><br>1010：不能删除数据目录导致删除数据库失败<br><br>1011：删除数据库文件失败<br><br>1012：不能读取系统表中的记录<br><br>1020：记录已被其他用户修改<br><br>1021：硬盘剩余空间不足，请加大硬盘可用空间<br><br>1022：关键字重复，更改记录失败<br><br>1023：关闭时发生错误<br><br>1024：读文件错误<br></p><p>1025：更改名字时发生错误<br><br>1026：写文件错误<br><br>1032：记录不存在<br><br>1036：数据表是只读的，不能对它进行修改<br><br>1037：系统内存不足，请重启数据库或重启服务器<br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;0101 属于其他进程的专用标志。&lt;br&gt;&lt;br&gt;0102 标志已经设置，无法关闭。&lt;br&gt;&lt;br&gt;0103 无法再次设置该标志。&lt;br&gt;&lt;br&gt;0104 中断时无法请求专用标志。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://yongchao.tech:8080/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>js自定义modal框</title>
    <link href="http://yongchao.tech:8080/2019/03/18/js%E8%87%AA%E5%AE%9A%E4%B9%89modal%E6%A1%86/"/>
    <id>http://yongchao.tech:8080/2019/03/18/js自定义modal框/</id>
    <published>2019-03-17T20:55:41.000Z</published>
    <updated>2019-03-28T05:02:37.648Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>作为一个Web开发而言，modal模态框一定不会陌生。本文将简单的讲一下如何使用js自定义一个modal框，当然了，本文的重点并不是教你如何构建一个modal框，而是希望能够教你如何构建一个组件的思路。好了，废话不多说，正文开始。</p><h3 id="modal是什么，有什么功能"><a href="#modal是什么，有什么功能" class="headerlink" title="modal是什么，有什么功能"></a>modal是什么，有什么功能</h3><p>modal是位于用户主窗口之上的一个元素，当它打开的时候，主窗口无法操作，位于主窗口之上的modal框内可以操作。一个modal至少包含以下几个功能：</p><ol><li>模态框的蒙版 .modal-overlay</li><li>头部  .modal-header</li><li>主体 .modal-body</li><li>脚步 .modal-footer</li><li>关闭按钮 .modal-close</li></ol><blockquote><p>关闭按钮包括多种方式：取消按钮（footer中）、关闭按钮(右上角)、ESC按键、点击模态框主体外的蒙版的区域</p></blockquote><h3 id="构建插件"><a href="#构建插件" class="headerlink" title="构建插件"></a>构建插件</h3><p>1.首先选择iife。这里使用了闭包的知识，因为闭包可以创建一个私有域。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">  var 私有变量 = 值</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>2.设置选项（options）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 设置一个windo中可以访问的函数 --&gt;</span><br><span class="line">this.Modal = function() &#123;</span><br><span class="line">  this.modal = null; // 模态弹出框</span><br><span class="line">  this.overlay = null; //蒙板</span><br><span class="line">  this.closeButton = null; // 右上角关闭按钮</span><br><span class="line">  this.footerCloseButton = null //footer关闭按钮</span><br><span class="line">  this.options = &#123;</span><br><span class="line">    className: &apos;fade-and-drop&apos;,</span><br><span class="line">    content: &apos;这是一个自定义的模态框&apos;,</span><br><span class="line">    minHeight: &apos;300px&apos;,</span><br><span class="line">    maxHeight: &apos;600px&apos;,</span><br><span class="line">    closable: true, // 是否可关闭，决定着是否有关闭按钮</span><br><span class="line">    overlay: true</span><br><span class="line">  &#125;;</span><br><span class="line">  //  合并默认设置和用户自定义设置，用户自定义配置&gt;默认配置</span><br><span class="line">  if (arguments[0] &amp;&amp; typeof arguments[0] === &apos;object&apos;) &#123;</span><br><span class="line">    this.options = mergeOptions(this.options, arguments[0]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//合并对象属性的工具方法</span><br><span class="line">function mergeOptions(target, source) &#123;</span><br><span class="line">  for (let property in source) &#123;</span><br><span class="line">    if (source.hasOwnProperty(property)) &#123;</span><br><span class="line">      target[property] = source[property];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.　核心功能</p><p>现在我们对模态框的插件架构有了一定的了解，它包括了：构造函数、选项和公共方法。但它还不能做什么？接下来我们就要给他们添加相应的核心功能。所以我们再来看看，一个模态框应该做什么：</p><ul><li>构建一个模态元素并将其添加到页面中</li><li>将选项（options）中的className指定一个类名，并将其添加到模态元素中</li><li>如果选项中的closeButton为true，则添加关闭按钮</li><li>如果选项中的content是 HTML 字符串，则将其设置为模态元素中的内容</li><li>如果选项中的content是domNode，则将其内部内容设置为模态元素的内容</li><li>分别设置模态的maxWidth和minWidth</li><li>如果选项中的overlay为true，则给模态框添加一个蒙层</li><li>当模态框显示时，添加一个scotch-open类名，可以在 CSS 中使用它来定义一个open状态</li><li>当模态框关闭时，删除scotch-open类名</li><li>如果模态框的高度超过视窗的高度，还可以添加一个scotch-anchored类，这样就可以处理这个场景的样式展示</li></ul><h3 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">  //构造函数</span><br><span class="line">  this.Modal = function () &#123;</span><br><span class="line">    // 初始化默认option，　</span><br><span class="line">    this.options = &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    //合并用户自定义配置和默认配置，并赋值给options, 每个实例都可能不一样，所有不能放在prototype上，同时在其它函数中又要引用它，所有定义为公有属性</span><br><span class="line">    </span><br><span class="line">    this.options = mergeOptions(this.options, arguments[0])</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  // 打开Modal的方法,每个实例中的这个方法都是一样的,定义在prototype上</span><br><span class="line">  Modal.prototype.open = function()&#123;</span><br><span class="line"></span><br><span class="line">    // 初始化Dom</span><br><span class="line">    1.overlay蒙版元素</span><br><span class="line">    2.modal元素&#123;</span><br><span class="line">      close按钮</span><br><span class="line">      content</span><br><span class="line">      footer</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 初始化Event</span><br><span class="line">    包括：&#123;</span><br><span class="line">      close事件</span><br><span class="line">      transitionEnd事件(关闭按钮中Css使用了过渡动画，等过渡动画完成之后才能移除dom)，需要注意的就是不同的的浏览器中这个时间的名字可能不一样</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //关闭方法</span><br><span class="line">  Modal.prototype.close = function()&#123;</span><br><span class="line">    //移除Dom</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="完整的代码链接-https-codepen-io-xuyongchaos-pen-aMGXLy-editors-1010"><a href="#完整的代码链接-https-codepen-io-xuyongchaos-pen-aMGXLy-editors-1010" class="headerlink" title="!!!!完整的代码链接 https://codepen.io/xuyongchaos/pen/aMGXLy?editors=1010"></a>!!!!完整的代码链接 <a href="https://codepen.io/xuyongchaos/pen/aMGXLy?editors=1010" target="_blank" rel="noopener">https://codepen.io/xuyongchaos/pen/aMGXLy?editors=1010</a></h3><h3 id="使用到的东西"><a href="#使用到的东西" class="headerlink" title="使用到的东西"></a>使用到的东西</h3><ol><li>闭包</li><li>DocumentFragment</li><li>如何减少浏览器回流</li><li>DOM操作</li><li>DOM事件</li><li>this相关call, bind</li><li>css样式</li></ol><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>编写一个简单的插件需要的知识还是挺多的，没事的话可以自己编写一下，不仅锻炼了模块化编程思维，还可以对以前的知识进行查缺补漏。fighting!!!</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;作为一个Web开发而言，modal模态框一定不会陌生。本文将简单的讲一下如何使用js自定义一个modal框，当然了，本文的重点并不是教你如何构建一个modal框，而是希望能够教你如何构建一个组件的思路。好了，废话不多说，正文开始。&lt;/p&gt;
&lt;h3 id=&quot;modal是什么，有什么功能&quot;&gt;&lt;a href=&quot;#modal是什么，有什么功能&quot; class=&quot;headerlink&quot; title=&quot;modal是什么，有什么功能&quot;&gt;&lt;/a&gt;modal是什么，有什么功能&lt;/h3&gt;&lt;p&gt;modal是位于用户主窗口之上的一个元素，当它打开的时候，主窗口无法操作，位于主窗口之上的modal框内可以操作。一个modal至少包含以下几个功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;模态框的蒙版 .modal-overlay&lt;/li&gt;
&lt;li&gt;头部  .modal-header&lt;/li&gt;
&lt;li&gt;主体 .modal-body&lt;/li&gt;
&lt;li&gt;脚步 .modal-footer&lt;/li&gt;
&lt;li&gt;关闭按钮 .modal-close&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;关闭按钮包括多种方式：取消按钮（footer中）、关闭按钮(右上角)、ESC按键、点击模态框主体外的蒙版的区域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;构建插件&quot;&gt;&lt;a href=&quot;#构建插件&quot; class=&quot;headerlink&quot; title=&quot;构建插件&quot;&gt;&lt;/a&gt;构建插件&lt;/h3&gt;&lt;p&gt;1.首先选择iife。这里使用了闭包的知识，因为闭包可以创建一个私有域。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yongchao.tech:8080/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>自定义js模态框插件</title>
    <link href="http://yongchao.tech:8080/2019/03/18/%E8%87%AA%E5%AE%9A%E4%B9%89js%E6%A8%A1%E6%80%81%E6%A1%86%E6%8F%92%E4%BB%B6/"/>
    <id>http://yongchao.tech:8080/2019/03/18/自定义js模态框插件/</id>
    <published>2019-03-17T20:46:16.000Z</published>
    <updated>2019-03-21T06:30:53.419Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>作为一个web开发ren yuan er ye an</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;作为一个web开发ren yuan er ye an&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="js" scheme="http://yongchao.tech:8080/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>从js的属性描述符浦西vue.js的响应式视图</title>
    <link href="http://yongchao.tech:8080/2019/03/16/%E4%BB%8Ejs%E7%9A%84%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6%E6%B5%A6%E8%A5%BFvue-js%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E8%A7%86%E5%9B%BE/"/>
    <id>http://yongchao.tech:8080/2019/03/16/从js的属性描述符浦西vue-js的响应式视图/</id>
    <published>2019-03-15T19:57:05.000Z</published>
    <updated>2019-03-21T06:30:53.419Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>JavaScript 的对象，拥有任意数量的唯一键，键可以是字符串（String）类型或标记（Symbol，ES6 新增的基本数据类型）类型，每个键对应一个值，值可以是任意类型的任意值。对于对象内的属性，JavaScript 提供了一个属性描述器接口 PropertyDescriptor</p><h3 id="定义对象的属性"><a href="#定义对象的属性" class="headerlink" title="定义对象的属性"></a>定义对象的属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  name: &apos;Tom&apos;,</span><br><span class="line">  sex: &apos;man</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">var obj = &#123;&#125;</span><br><span class="line">obj.name = &apos;Tom&apos;</span><br></pre></td></tr></table></figure><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h3><p>上面使用的方式不能对属性描述符的操作，需要使用 Object.ddefineProperty(obj, prop, descriptor)</p><h4 id="当使用-defineProperty-方法操作属性的时候，描述符的默认值为："><a href="#当使用-defineProperty-方法操作属性的时候，描述符的默认值为：" class="headerlink" title="当使用 defineProperty()方法操作属性的时候，描述符的默认值为："></a>当使用 defineProperty()方法操作属性的时候，描述符的默认值为：</h4><ol><li>value: undefined</li><li>set: undefined</li><li>get: undefined</li><li>writable: false</li><li>enumerable: false</li><li>configable: false</li></ol><h4 id="不使用该方法定义属性，默认值为："><a href="#不使用该方法定义属性，默认值为：" class="headerlink" title="不使用该方法定义属性，默认值为："></a>不使用该方法定义属性，默认值为：</h4><ol><li>value: undefined</li><li>set: undefined</li><li>get: undefined</li><li>writable: true</li><li>enumerable: true</li><li>configable: true</li></ol><h4 id="还支持批量修改对象属性以及描述对象"><a href="#还支持批量修改对象属性以及描述对象" class="headerlink" title="还支持批量修改对象属性以及描述对象"></a>还支持批量修改对象属性以及描述对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperties(obj, &#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">    value: &apos;Tom&apos;,</span><br><span class="line">    configable: true</span><br><span class="line">  &#125;,</span><br><span class="line">  sex: &#123;</span><br><span class="line">    value: &apos;man&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="读取属性描述符对象-Object-getOwnPropertyDescriptor-obj-prop"><a href="#读取属性描述符对象-Object-getOwnPropertyDescriptor-obj-prop" class="headerlink" title="读取属性描述符对象 Object.getOwnPropertyDescriptor(obj,prop)"></a>读取属性描述符对象 Object.getOwnPropertyDescriptor(obj,prop)</h4><h3 id="属性描述符对象"><a href="#属性描述符对象" class="headerlink" title="属性描述符对象"></a>属性描述符对象</h3><h4 id="value-属性的值"><a href="#value-属性的值" class="headerlink" title="value 属性的值"></a>value 属性的值</h4><h4 id="存储器函数（setter-getter）"><a href="#存储器函数（setter-getter）" class="headerlink" title="存储器函数（setter/getter）"></a>存储器函数（setter/getter）</h4><p>1.get<br>2.set</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var x = &#123;&#125;</span><br><span class="line">Object.defineProperty(x, &apos;count&apos;, &#123;</span><br><span class="line">  get: funciton () &#123;</span><br><span class="line">    return this.value</span><br><span class="line">  &#125;,</span><br><span class="line">  set: function (val) &#123; </span><br><span class="line">    this.count = val</span><br><span class="line">  &#125; </span><br><span class="line">&#125;)</span><br><span class="line">console.log(x) </span><br><span class="line">x.count = 1 </span><br><span class="line">console.log(x.count)</span><br></pre></td></tr></table></figure><p>执行上面的代码，会发现报错，执行栈溢出。</p><blockquote><p>上述代码在执行set 函数中执行 count赋值操作的时候(this.count = val)，循环调用自己，形成了死循环。<br>更改为以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var x = &#123;&#125;</span><br><span class="line">Object.defineProperty(x, &apos;count&apos;, &#123;</span><br><span class="line">  get: () &#123;</span><br><span class="line">    return this._count</span><br><span class="line">  &#125;</span><br><span class="line">  set: function (val) &#123; </span><br><span class="line">     this._count = val </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(x) </span><br><span class="line">x.count = 1 </span><br><span class="line">console.log(x.count)</span><br></pre></td></tr></table></figure></p></blockquote><p>实际上，在使用 defineProperty()方法设置对象的属性的时候，通常需要在对象内部维护一个新的内部变量(以下划线_开头，表示为内部变量)</p><blockquote><p>注：当设置了存取器描述时，不能设置value 和writable, 可以当作没有这两个属性</p></blockquote><h4 id="writable-指定对象的value是否可以改变"><a href="#writable-指定对象的value是否可以改变" class="headerlink" title="writable 指定对象的value是否可以改变"></a>writable 指定对象的value是否可以改变</h4><h4 id="enumerable-指定对象中的某属性是否可以枚举，就是for-in-操作是否可以遍历出来"><a href="#enumerable-指定对象中的某属性是否可以枚举，就是for-in-操作是否可以遍历出来" class="headerlink" title="enumerable 指定对象中的某属性是否可以枚举，就是for in 操作是否可以遍历出来"></a>enumerable 指定对象中的某属性是否可以枚举，就是for in 操作是否可以遍历出来</h4><h4 id="configable-指定对象属性的描述符是否可以改变"><a href="#configable-指定对象属性的描述符是否可以改变" class="headerlink" title="configable 指定对象属性的描述符是否可以改变"></a>configable 指定对象属性的描述符是否可以改变</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;JavaScript 的对象，拥有任意数量的唯一键，键可以是字符串（String）类型或标记（Symbol，ES6 新增的基本数据类型）类型，每个键对应一个值，值可以是任意类型的任意值。对于对象内的属性，JavaScript 提供了一个属性描述器接口 PropertyDescriptor&lt;/p&gt;
&lt;h3 id=&quot;定义对象的属性&quot;&gt;&lt;a href=&quot;#定义对象的属性&quot; class=&quot;headerlink&quot; title=&quot;定义对象的属性&quot;&gt;&lt;/a&gt;定义对象的属性&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name: &amp;apos;Tom&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sex: &amp;apos;man&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;or&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var obj = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.name = &amp;apos;Tom&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Object-defineProperty&quot;&gt;&lt;a href=&quot;#Object-defineProperty&quot; class=&quot;headerlink&quot; title=&quot;Object.defineProperty()&quot;&gt;&lt;/a&gt;Object.defineProperty()&lt;/h3&gt;&lt;p&gt;上面使用的方式不能对属性描述符的操作，需要使用 Object.ddefineProperty(obj, prop, descriptor)&lt;/p&gt;
&lt;h4 id=&quot;当使用-defineProperty-方法操作属性的时候，描述符的默认值为：&quot;&gt;&lt;a href=&quot;#当使用-defineProperty-方法操作属性的时候，描述符的默认值为：&quot; class=&quot;headerlink&quot; title=&quot;当使用 defineProperty()方法操作属性的时候，描述符的默认值为：&quot;&gt;&lt;/a&gt;当使用 defineProperty()方法操作属性的时候，描述符的默认值为：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;value: undefined&lt;/li&gt;
&lt;li&gt;set: undefined&lt;/li&gt;
&lt;li&gt;get: undefined&lt;/li&gt;
&lt;li&gt;writable: false&lt;/li&gt;
&lt;li&gt;enumerable: false&lt;/li&gt;
&lt;li&gt;configable: false&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;不使用该方法定义属性，默认值为：&quot;&gt;&lt;a href=&quot;#不使用该方法定义属性，默认值为：&quot; class=&quot;headerlink&quot; title=&quot;不使用该方法定义属性，默认值为：&quot;&gt;&lt;/a&gt;不使用该方法定义属性，默认值为：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;value: undefined&lt;/li&gt;
&lt;li&gt;set: undefined&lt;/li&gt;
&lt;li&gt;get: undefined&lt;/li&gt;
&lt;li&gt;writable: true&lt;/li&gt;
&lt;li&gt;enumerable: true&lt;/li&gt;
&lt;li&gt;configable: true&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;还支持批量修改对象属性以及描述对象&quot;&gt;&lt;a href=&quot;#还支持批量修改对象属性以及描述对象&quot; class=&quot;headerlink&quot; title=&quot;还支持批量修改对象属性以及描述对象&quot;&gt;&lt;/a&gt;还支持批量修改对象属性以及描述对象&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Object.defineProperties(obj, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value: &amp;apos;Tom&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    configable: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sex: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value: &amp;apos;man&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yongchao.tech:8080/tags/vue/"/>
    
      <category term="js" scheme="http://yongchao.tech:8080/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>stringify的使用</title>
    <link href="http://yongchao.tech:8080/2019/03/13/stringify%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yongchao.tech:8080/2019/03/13/stringify的使用/</id>
    <published>2019-03-13T14:34:07.000Z</published>
    <updated>2019-03-21T06:30:53.415Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章的由来是这样的：前两天遇到这样一个场景，接口返回了一个json对象，要求我进行格式化显示（显示出json对象的结构）。那么我就想了，一个对象要想显示出来，得转成string 类型的，于是我就使用了JSON.stringify(),但是转成字符串之后并没有缩进，显示出来的是一个长长的字符串。难道我还要自己人为的遍历对象,自己拼接一个带缩进的字符串么？太TM扯了！于是查看了stringify的官方文档，发现了很多有意思的东西，这个函数的作用远远不止是将json对象转成string那么简单，下面是我列举的stringify的几个小功能:</p><ol><li>json格式化，带缩进</li><li>过滤掉无效的字段</li><li>对符合某种条件的字段做操作</li></ol><p>原始数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;</span><br><span class="line">    sex: &apos;man&apos;,</span><br><span class="line">    name: &apos;Tom&apos;,</span><br><span class="line">    telphones: [</span><br><span class="line">        &quot;234123423&quot;,</span><br><span class="line">        &quot;2345234523&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一、原始情况，直接显示json字符串</p><p>code:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JOSN.stringify(person)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;sex&quot;:&quot;man&quot;,&quot;name&quot;:&quot;Tom&quot;,&quot;age&quot;:22,&quot;telphones&quot;:[&quot;2341234123&quot;,&quot;3452345&quot;]&#125;</span><br></pre></td></tr></table></figure></p><p>二、将一个json对象格式化显示出来</p><p>code:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON.stringify(person, null, 2)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    sex: &apos;man&apos;,</span><br><span class="line">    name: &apos;Tom&apos;,</span><br><span class="line">    telphones: [</span><br><span class="line">        &quot;234123423&quot;,</span><br><span class="line">        &quot;2345234523&quot;</span><br><span class="line">    ]   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>三、不显示某些字段（哪些字段不需要显示就返回undefined）</p><p>code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JOSN.stringify(person, function(k, v)&#123;</span><br><span class="line">    if (k === &apos;telphones&apos;)&#123;</span><br><span class="line">        return undefined</span><br><span class="line">    &#125;</span><br><span class="line">    return v</span><br><span class="line">&#125;, 2)</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    sex: &apos;man&apos;,</span><br><span class="line">    name: &apos;Tom&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>四、只显示某些字段</p><p>code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JOSN.stringify(person, [&apos;sex&apos;], 2)</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    sex: &apos;man&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更多详情<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章的由来是这样的：前两天遇到这样一个场景，接口返回了一个json对象，要求我进行格式化显示（显示出json对象的结构）。那么我就想了，一个对象要想显示出来，得转成string 类型的，于是我就使用了JSON.stringify(),但是转成字符串之后并没有缩进，显示出
      
    
    </summary>
    
    
      <category term="JSON js" scheme="http://yongchao.tech:8080/tags/JSON-js/"/>
    
  </entry>
  
  <entry>
    <title>将数组扁平化并去除其中重复数据，最终得到一个升序且不重复的数组</title>
    <link href="http://yongchao.tech:8080/2019/03/10/%E5%B0%86%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96%E5%B9%B6%E5%8E%BB%E9%99%A4%E5%85%B6%E4%B8%AD%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE%EF%BC%8C%E6%9C%80%E7%BB%88%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AA%E5%8D%87%E5%BA%8F%E4%B8%94%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E7%BB%84/"/>
    <id>http://yongchao.tech:8080/2019/03/10/将数组扁平化并去除其中重复数据，最终得到一个升序且不重复的数组/</id>
    <published>2019-03-09T18:48:18.000Z</published>
    <updated>2019-03-21T06:30:53.419Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr = [ [1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14] ] ] ], 10];</span><br></pre></td></tr></table></figure><h3 id="解决方法1"><a href="#解决方法1" class="headerlink" title="解决方法1"></a>解决方法1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...new Set(arr.flat(Infinity).sort((a,b) =&gt; a-b))]</span><br></pre></td></tr></table></figure><h3 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2"></a>解决方法2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[...new Set(arr.toString().split(&apos;,&apos;).map(Number).sort((a,b) =&gt; a-b))]</span><br><span class="line">or</span><br><span class="line">Arrary.froms(new Set(arr.toString().split(&apos;,&apos;).map(Number).sort((a,b) =&gt; a-b)))</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解决方法3"><a href="#解决方法3" class="headerlink" title="解决方法3"></a>解决方法3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function flatten(arr)&#123;</span><br><span class="line">  while(arr.some(item =&gt; Array.isArray(item)))&#123;</span><br><span class="line">    arr = [].concat(...arr)</span><br><span class="line">  &#125;</span><br><span class="line">  return arr</span><br><span class="line">&#125;</span><br><span class="line">Array.from(new Set(flatten(arr))).sort((a,b) =&gt; a-b)</span><br></pre></td></tr></table></figure><h3 id="解决方法4"><a href="#解决方法4" class="headerlink" title="解决方法4"></a>解决方法4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arrary.prototype.flat = function()&#123;</span><br><span class="line">  return [].concat[...this.map(item =&gt; (Array.isArray(item) ? item.flat() : [item]))]</span><br><span class="line">&#125;</span><br><span class="line">Arrary.prototype.unique = function() &#123;</span><br><span class="line">  return [...new Set(this)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>补充：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">数组实例的flat()</span><br><span class="line">特点：</span><br><span class="line">1.falt()默认为“拉平”一层</span><br><span class="line">2.如果原数组有空位， flat()方法会跳过空位</span><br><span class="line"></span><br><span class="line">flatMap方法：</span><br><span class="line">介绍：对原方法中的每个成员执行一个函数，然后对返回值的数组执行flat()方法。该方法返回一个新数组，不改变原数组</span><br><span class="line">// 相当于 [[2, 4], [3, 6], [4, 8]].flat()</span><br><span class="line">[2, 3, 4].flatMap((x) =&gt; [x, x * 2])</span><br><span class="line">// [2, 4, 3, 6, 4, 8]</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var arr = [ [1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14] ] ] ], 10];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;解决方法1&quot;&gt;&lt;a href=&quot;#解决方法1&quot; class=&quot;headerlink&quot; title=&quot;解决方法1&quot;&gt;&lt;/a&gt;解决方法1&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[...new Set(arr.flat(Infinity).sort((a,b) =&amp;gt; a-b))]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;解决方法2&quot;&gt;&lt;a href=&quot;#解决方法2&quot; class=&quot;headerlink&quot; title=&quot;解决方法2&quot;&gt;&lt;/a&gt;解决方法2&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[...new Set(arr.toString().split(&amp;apos;,&amp;apos;).map(Number).sort((a,b) =&amp;gt; a-b))]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;or&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Arrary.froms(new Set(arr.toString().split(&amp;apos;,&amp;apos;).map(Number).sort((a,b) =&amp;gt; a-b)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yongchao.tech:8080/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue中使用cytoscape绘制拓扑图方案</title>
    <link href="http://yongchao.tech:8080/2019/03/08/vue%E4%B8%AD%E4%BD%BF%E7%94%A8cytoscape%E7%BB%98%E5%88%B6%E6%8B%93%E6%89%91%E5%9B%BE%E6%96%B9%E6%A1%88/"/>
    <id>http://yongchao.tech:8080/2019/03/08/vue中使用cytoscape绘制拓扑图方案/</id>
    <published>2019-03-08T15:36:50.000Z</published>
    <updated>2019-03-21T06:30:53.419Z</updated>
    
    <content type="html"><![CDATA[<p>有一个需求需要绘制拓扑图，然后选图表库选择了cytoscape,看了官方文档<a href="http://js.cytoscape.org，感觉和network.js很像，包括两种element,一种是node（描述其相关信息），另一种是" target="_blank" rel="noopener">http://js.cytoscape.org，感觉和network.js很像，包括两种element,一种是node（描述其相关信息），另一种是</a> edge(描述node之间的关系， 通过指明source, target确定指向)，其余的都是一些样式配置和事件的监听，可以说是非常的清晰明了了。此外文档的Extensions部分提供了各种的UI插件和API插件，拓展性也不错。</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">nodes: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"a"</span>,//required</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"demo"</span>,//optional</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"b"</span>,//required</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"demo"</span>,//optional</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">edges: [</span><br><span class="line">  //描述了 a--&gt;b</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"aadsfasdf"</span>, //optional</span><br><span class="line">    <span class="string">"source"</span>: <span class="string">"a"</span>, //required, <span class="built_in">source</span>-node-id</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"b"</span>,  //required target-node-id</span><br><span class="line">  &#125;,</span><br><span class="line">  //描述了 a--&gt;a,会出现一个指向自己的圆，不过想要实现这一点需要cytoscape-edgehandles插件</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"aadsfasdf"</span>, //optional</span><br><span class="line">    <span class="string">"source"</span>: <span class="string">"a"</span>, //required, <span class="built_in">source</span>-node-id</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"a"</span>,  //required target-node-id</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="实际栗子"><a href="#实际栗子" class="headerlink" title="实际栗子"></a>实际栗子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;cy&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import cytoscape from &apos;cytoscape&apos;</span><br><span class="line">&lt;!--为edge添加事件和二维的布局 --&gt;</span><br><span class="line">import edgehandles from &apos;cytoscape-edgehandles&apos;</span><br><span class="line"></span><br><span class="line">&lt;!-- 提供类似于tooltip的提示框 --&gt;</span><br><span class="line">import popper from &apos;cytoscape-popper&apos;</span><br><span class="line">import tippy from &apos;tippy.js&apos;</span><br><span class="line"></span><br><span class="line">&lt;!-- 引入data --&gt;</span><br><span class="line">import data from &apos;./data.js&apos;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用插件 --&gt;</span><br><span class="line">cytoscape.use(edgehandles)</span><br><span class="line">cytoscape.use(popper)</span><br><span class="line"></span><br><span class="line">&lt;!-- 可以使用自己选的配色 --&gt;</span><br><span class="line">let colors = [&apos;#FFFFCC&apos;, &apos;#CCFFFF&apos;, &apos;#FFCCCC&apos;, &apos;#FFFF99&apos;, &apos;#CCCCFF&apos;, &apos;#FF9966&apos;, &apos;#FF6666&apos;, &apos;#FFCC99&apos;, &apos;#CCFF99&apos;, &apos;#CCCCCC&apos;, &apos;#CCFFCC&apos;, &apos;#99CC99&apos;, &apos;#99CCCC&apos;]</span><br><span class="line">let colors1 = [&apos;#FF6666&apos;, &apos;#006699&apos;, &apos;#FF9966&apos;, &apos;#0066CC&apos;, &apos;#339933&apos;, &apos;#FFCC33&apos;, &apos;#FF9900&apos;, &apos;#FFFFCC&apos;, &apos;#CC6600&apos;, &apos;#CCCC44&apos;, &apos;#99CC33&apos;, &apos;#0099CC&apos;, &apos;#99CCCC&apos;, &apos;#FF0033&apos;, &apos;#333399&apos;, &apos;#CCCC00&apos;, &apos;#33CC99&apos;, &apos;#FFFF00&apos;, &apos;#336699&apos;]</span><br><span class="line">let colors2 = [&apos;#CCFF99&apos;, &apos;#99CCFF&apos;, &apos;#99CCCC&apos;, &apos;#CCFFCC&apos;, &apos;#66CCCC&apos;, &apos;#CCCCFF&apos;, &apos;#FFFFCC&apos;, &apos;#CCFFFF&apos;, &apos;#66CCFF&apos;, &apos;#6699CC&apos;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let vm = null</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tippyInstance: null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    draw () &#123;</span><br><span class="line">      let nodes = data.nodes</span><br><span class="line">      let edges = data.edges</span><br><span class="line">      nodes.map((x, i) =&gt; &#123;</span><br><span class="line">        x.data.color = colors[i % 13]</span><br><span class="line">        // x.data.color = colors1[i % 19]</span><br><span class="line">        x.data.color = colors2[i % 10]</span><br><span class="line">        return x</span><br><span class="line">      &#125;)</span><br><span class="line">      let cy = cytoscape(&#123;</span><br><span class="line">        container: document.getElementById(&apos;cy&apos;),</span><br><span class="line">        layout: &#123;</span><br><span class="line">          name: &apos;grid&apos;,</span><br><span class="line">          concentric: function (n) &#123; return n.id() === &apos;j&apos; ? 200 : 0 &#125;,</span><br><span class="line">          levelWidth: function (nodes) &#123; return 100 &#125;,</span><br><span class="line">          minNodeSpacing: 100</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        style: [</span><br><span class="line">          &#123;</span><br><span class="line">            selector: &apos;node&apos;,</span><br><span class="line">            style: &#123;</span><br><span class="line">              &apos;content&apos;: &apos;data(name)&apos;,</span><br><span class="line">              &apos;width&apos;: &apos;mapData(size, 0, 1.0, 40, 60)&apos;,</span><br><span class="line">              &apos;height&apos;: &apos;mapData(size, 0, 1.0, 40, 60)&apos;,</span><br><span class="line">              &apos;background-color&apos;: &apos;data(color)&apos;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          &#123;</span><br><span class="line">            selector: &apos;edge&apos;,</span><br><span class="line">            style: &#123;</span><br><span class="line">              &apos;curve-style&apos;: &apos;unbundled-bezier&apos;,</span><br><span class="line">              &apos;target-arrow-shape&apos;: &apos;triangle&apos;,</span><br><span class="line">              &apos;target-arrow-color&apos;: &apos;data(colour)&apos;,</span><br><span class="line">              &apos;line-color&apos;: &apos;data(colour)&apos;,</span><br><span class="line">              &apos;width&apos;: &apos;mapData(width, 0, 1.0, 1, 3)&apos;,</span><br><span class="line">              // &apos;label&apos;: &apos;data(info)&apos;</span><br><span class="line">              &apos;control-point-distances&apos;: [40, -40],</span><br><span class="line">              &apos;control-point-weights&apos;: [0.25, 0.75]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          // some style for the extension</span><br><span class="line"></span><br><span class="line">          &#123;</span><br><span class="line">            selector: &apos;.eh-handle&apos;,</span><br><span class="line">            style: &#123;</span><br><span class="line">              &apos;background-color&apos;: &apos;red&apos;,</span><br><span class="line">              &apos;width&apos;: 12,</span><br><span class="line">              &apos;height&apos;: 12,</span><br><span class="line">              &apos;shape&apos;: &apos;ellipse&apos;,</span><br><span class="line">              &apos;overlay-opacity&apos;: 0,</span><br><span class="line">              &apos;border-width&apos;: 12, // makes the handle easier to hit</span><br><span class="line">              &apos;border-opacity&apos;: 0</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          &#123;</span><br><span class="line">            selector: &apos;.eh-hover&apos;,</span><br><span class="line">            style: &#123;</span><br><span class="line">              &apos;background-color&apos;: &apos;red&apos;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          &#123;</span><br><span class="line">            selector: &apos;.eh-source&apos;,</span><br><span class="line">            style: &#123;</span><br><span class="line">              &apos;border-width&apos;: 2,</span><br><span class="line">              &apos;border-color&apos;: &apos;red&apos;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          &#123;</span><br><span class="line">            selector: &apos;.eh-target&apos;,</span><br><span class="line">            style: &#123;</span><br><span class="line">              &apos;border-width&apos;: 2,</span><br><span class="line">              &apos;border-color&apos;: &apos;red&apos;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          &#123;</span><br><span class="line">            selector: &apos;.eh-preview, .eh-ghost-edge&apos;,</span><br><span class="line">            style: &#123;</span><br><span class="line">              &apos;background-color&apos;: &apos;red&apos;,</span><br><span class="line">              &apos;line-color&apos;: &apos;red&apos;,</span><br><span class="line">              &apos;target-arrow-color&apos;: &apos;red&apos;,</span><br><span class="line">              &apos;source-arrow-color&apos;: &apos;red&apos;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          &#123;</span><br><span class="line">            selector: &apos;.eh-ghost-edge.eh-preview-active&apos;,</span><br><span class="line">            style: &#123;</span><br><span class="line">              &apos;opacity&apos;: 0</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            selector: &apos;.edge-out-highlight&apos;,</span><br><span class="line">            style: &#123;</span><br><span class="line">              &apos;line-color&apos;: &apos;black&apos;,</span><br><span class="line">              &apos;target-arrow-color&apos;: &apos;black&apos;,</span><br><span class="line">              width: 3</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            selector: &apos;.edge-in-highlight&apos;,</span><br><span class="line">            style: &#123;</span><br><span class="line">              &apos;line-color&apos;: &apos;purple&apos;,</span><br><span class="line">              &apos;target-arrow-color&apos;: &apos;purple&apos;,</span><br><span class="line">              width: 3</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        elements: &#123;</span><br><span class="line">          nodes: nodes,</span><br><span class="line">          edges: edges</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      // edge添加事件</span><br><span class="line">      cy.on(&apos;tap&apos;, &apos;edge&apos;, function (evt) &#123;</span><br><span class="line">        var node = evt.target</span><br><span class="line">        if (vm.tippyInstance) &#123;</span><br><span class="line">          vm.tippyInstance.hide()</span><br><span class="line">          vm.tippyInstance.destroy()</span><br><span class="line">        &#125;</span><br><span class="line">        vm.makeTippy(node)</span><br><span class="line">        vm.tippyInstance.show()</span><br><span class="line">      &#125;)</span><br><span class="line">      </span><br><span class="line">      // node 添加事件</span><br><span class="line">      cy.on(&apos;tap&apos;, &apos;edge&apos;, function (evt) &#123;</span><br><span class="line">        var node = evt.target</span><br><span class="line">        if (vm.tippyInstance) &#123;</span><br><span class="line">          vm.tippyInstance.hide()</span><br><span class="line">          vm.tippyInstance.destroy()</span><br><span class="line">        &#125;</span><br><span class="line">        vm.makeTippy(node)</span><br><span class="line">        vm.tippyInstance.show()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      cy.on(&apos;tap&apos;, &apos;node&apos;, function (evt) &#123;</span><br><span class="line">        var node = evt.target</span><br><span class="line">        node.incomers(&apos;edge&apos;).toggleClass(&apos;edge-in-highlight&apos;)</span><br><span class="line">        node.edgesWith(&apos;*&apos;).toggleClass(&apos;edge-out-highlight&apos;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    makeTippy (node) &#123;</span><br><span class="line">      &lt;!-- 点击edge出现一个弹框，显示一些额外的信息 --&gt;</span><br><span class="line">      this.tippyInstance = tippy(node.popperRef(), &#123;</span><br><span class="line">        content: function () &#123;</span><br><span class="line">          var div = document.createElement(&apos;div&apos;)</span><br><span class="line">          div.innerHTML = `&lt;p style=&quot;text-align:left;padding-top:8px;&quot;&gt;$&#123;node._private.data.info&#125;&lt;/p&gt;`</span><br><span class="line">          return div</span><br><span class="line">        &#125;,</span><br><span class="line">        trigger: &apos;manual&apos;,</span><br><span class="line">        arrow: true,</span><br><span class="line">        placement: &apos;bottom&apos;,</span><br><span class="line">        hideOnClick: false,</span><br><span class="line">        multiple: true,</span><br><span class="line">        sticky: true</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    vm = this</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    this.$nextTick(() =&gt; &#123;</span><br><span class="line">      this.draw()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一个需求需要绘制拓扑图，然后选图表库选择了cytoscape,看了官方文档&lt;a href=&quot;http://js.cytoscape.org，感觉和network.js很像，包括两种element,一种是node（描述其相关信息），另一种是&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://js.cytoscape.org，感觉和network.js很像，包括两种element,一种是node（描述其相关信息），另一种是&lt;/a&gt; edge(描述node之间的关系， 通过指明source, target确定指向)，其余的都是一些样式配置和事件的监听，可以说是非常的清晰明了了。此外文档的Extensions部分提供了各种的UI插件和API插件，拓展性也不错。&lt;/p&gt;
&lt;h3 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nodes: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;,//required&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;demo&quot;&lt;/span&gt;,//optional&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;,//required&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;demo&quot;&lt;/span&gt;,//optional&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;edges: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  //描述了 a--&amp;gt;b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;aadsfasdf&quot;&lt;/span&gt;, //optional&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;source&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;, //required, &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;-node-id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;target&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;,  //required target-node-id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  //描述了 a--&amp;gt;a,会出现一个指向自己的圆，不过想要实现这一点需要cytoscape-edgehandles插件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;aadsfasdf&quot;&lt;/span&gt;, //optional&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;source&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;, //required, &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;-node-id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;target&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;,  //required target-node-id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yongchao.tech:8080/tags/vue/"/>
    
      <category term="graph" scheme="http://yongchao.tech:8080/tags/graph/"/>
    
  </entry>
  
  <entry>
    <title>cytoscape的简单使用</title>
    <link href="http://yongchao.tech:8080/2019/03/07/cytoscape%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://yongchao.tech:8080/2019/03/07/cytoscape的简单使用/</id>
    <published>2019-03-07T14:29:42.000Z</published>
    <updated>2019-03-21T06:30:53.415Z</updated>
    
    <content type="html"><![CDATA[<h3 id="cy实例对象常用操作"><a href="#cy实例对象常用操作" class="headerlink" title="cy实例对象常用操作"></a>cy实例对象常用操作</h3><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><pre><code>cy.add(eleObj/eleObjs/eles)</code></pre><h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><pre><code>cy.remove(elems/selector)</code></pre><h4 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h4><pre><code>cy.colleciton 返回一个new empty collectioncy.getElementById() or  cy.$id()   return one elementcy.$(selector)、cy.elements(selector)  return  elementscy.nodes(selector)cy.edges(selector)cy.filter(selector) return elementscy.filter(function(ele, i, eles))  - ele The current element under consideration for filtering.  - i The counter used for iteration over the elements in the graph.  - eles The collection of elements being filtered</code></pre><blockquote><p>ps: cy.nodes(‘[weight &gt; 50]’);</p></blockquote><h4 id="批量修改-能够有效的减少渲染成本"><a href="#批量修改-能够有效的减少渲染成本" class="headerlink" title="批量修改(能够有效的减少渲染成本)"></a>批量修改(能够有效的减少渲染成本)</h4><pre><code>cy.batch()cy.satrtBatch()cy.endBatch()</code></pre><blockquote><p>demo如下<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy.startBatch();</span><br><span class="line"></span><br><span class="line">&lt;!-- 多次的样式修改操作 --&gt;</span><br><span class="line">cy.$(&apos;#j&apos;)</span><br><span class="line">  .data(&apos;weight&apos;, &apos;70&apos;)</span><br><span class="line">  .addClass(&apos;funny&apos;)</span><br><span class="line">  .removeClass(&apos;serious&apos;)</span><br><span class="line"></span><br><span class="line">cy.endBatch();</span><br><span class="line">能够减少中间的redraw的成本，和jquery中将一系列修改样式的操作合并到一个类中，对这个类进行操作一个道理。</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="create"><a href="#create" class="headerlink" title="create"></a>create</h4><pre><code>cy.mount()cy.unmount()</code></pre><h4 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h4><pre><code>cy.destroy() 有利于gc</code></pre><h4 id="临时数据操作"><a href="#临时数据操作" class="headerlink" title="临时数据操作"></a>临时数据操作</h4><pre><code>cy.scratch([namespace], [value])cy.removeScratch()</code></pre><h3 id="全局函数：-cytoscape在调试过程中在console中打印一些错"><a href="#全局函数：-cytoscape在调试过程中在console中打印一些错" class="headerlink" title="全局函数： cytoscape在调试过程中在console中打印一些错"></a>全局函数： cytoscape在调试过程中在console中打印一些错</h3><ul><li>cytoscape.warnings(false) 禁止报错</li><li>cytoscape.warnings(true)  开启报错</li><li>cytoscape.warnings()      得到当前状态</li></ul><h3 id="collection的一些操作"><a href="#collection的一些操作" class="headerlink" title="collection的一些操作"></a>collection的一些操作</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;cy实例对象常用操作&quot;&gt;&lt;a href=&quot;#cy实例对象常用操作&quot; class=&quot;headerlink&quot; title=&quot;cy实例对象常用操作&quot;&gt;&lt;/a&gt;cy实例对象常用操作&lt;/h3&gt;&lt;h4 id=&quot;添加&quot;&gt;&lt;a href=&quot;#添加&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="graph" scheme="http://yongchao.tech:8080/tags/graph/"/>
    
  </entry>
  
  <entry>
    <title>post和get的区别</title>
    <link href="http://yongchao.tech:8080/2019/03/06/post%E5%92%8Cget%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yongchao.tech:8080/2019/03/06/post和get的区别/</id>
    <published>2019-03-05T17:02:27.000Z</published>
    <updated>2019-03-21T06:30:53.415Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>首先， GET、POST 都是htt请求的的方法。它们本质上并无差别。HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的 。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>那么， 问题来了。<br>1、”GET请求在URL中传送的参数是有长度限制的，而POST没有”是什么鬼？。<br>  答： url长度限制都是浏览器设置的；而GET也可以在request body中传递参数，只不过不同的服务器对这些数据的处理方式不同，有些接受，有些忽略。</p><p>2、GET和POST还有一个重大区别，简单的说：GET产生一个TCP数据包；POST产生两个TCP数据包。长的说：对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。<br>  答： 1. GET与POST都有自己的语义，不能随便混用。</p><pre><code>2. 据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。3. 并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;首先， GET、POST 都是htt请求的的方法。它们本质上并无差别。HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/I
      
    
    </summary>
    
    
      <category term="http" scheme="http://yongchao.tech:8080/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>webhook-demo</title>
    <link href="http://yongchao.tech:8080/2019/03/05/webhook-demo/"/>
    <id>http://yongchao.tech:8080/2019/03/05/webhook-demo/</id>
    <published>2019-03-05T09:46:15.000Z</published>
    <updated>2019-03-21T06:30:53.419Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&apos;http&apos;)</span><br><span class="line">  , exec = require(&apos;exec&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const PORT = process.env.PORT || 9988</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let transporter = nodemailer.createTransport(&#123;</span><br><span class="line">  service: &apos;smpt.163.com&apos;,</span><br><span class="line">  host: &apos;smtp.163.com&apos;,</span><br><span class="line">  secureConnection: true,</span><br><span class="line">  port:    465,</span><br><span class="line">  auth: &#123;</span><br><span class="line">    user: &apos;XXX@163.com&apos;,</span><br><span class="line">    pass: &apos;XXXXXXX&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">let defaultOpions = &#123;</span><br><span class="line">  from: &apos;yongchao blog &lt;XXX@163.com&gt;&apos;,</span><br><span class="line">  to: &apos;XXXX@qq.com&apos;,</span><br><span class="line">  subject: &apos;yongchao blog&apos;,</span><br><span class="line">  html: &apos;&lt;b&gt;blog deploy success !&lt;/b&gt;&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var deployServer = http.createServer(function(request, response) &#123;</span><br><span class="line">  if (request.url.search(/deploy\/?$/i) &gt; 0) &#123;</span><br><span class="line"> </span><br><span class="line">    var commands = [</span><br><span class="line">      &apos;make restart&apos; //这是我自定义的重新部署的代码</span><br><span class="line">    ].join(&apos; &amp;&amp; &apos;)</span><br><span class="line"> </span><br><span class="line">    exec(commands, function(err, out, code) &#123;</span><br><span class="line">      if (err instanceof Error) &#123;</span><br><span class="line">        response.writeHead(500)</span><br><span class="line">        response.end(&apos;Server Internal Error.&apos;)</span><br><span class="line">        throw err</span><br><span class="line">      &#125;</span><br><span class="line">      process.stderr.write(err)</span><br><span class="line">      process.stdout.write(out)</span><br><span class="line">      response.writeHead(200)</span><br><span class="line">      response.end(&apos;Deploy Done.&apos;)</span><br><span class="line">      transporter.sendMail(defaultOpions, (err, info) =&gt; &#123;</span><br><span class="line">          if(err) &#123;</span><br><span class="line">                  console.error(err)</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">              console.log(err, info)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"> </span><br><span class="line">  &#125; else &#123;</span><br><span class="line"> </span><br><span class="line">    response.writeHead(404)</span><br><span class="line">    response.end(&apos;Not Found.&apos;)</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">deployServer.listen(PORT, () =&gt; &#123;</span><br><span class="line">  console.log(&apos;start service&apos; + PORT)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue-directive</title>
    <link href="http://yongchao.tech:8080/2019/03/05/vue-directive/"/>
    <id>http://yongchao.tech:8080/2019/03/05/vue-directive/</id>
    <published>2019-03-04T19:34:37.000Z</published>
    <updated>2019-03-21T06:30:53.419Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue-directive-的几个钩子函数"><a href="#vue-directive-的几个钩子函数" class="headerlink" title="vue-directive 的几个钩子函数"></a>vue-directive 的几个钩子函数</h3><ul><li>bind  指令第一次被绑定到元素时调用，只调用一次</li><li>inserted 被绑定元素插入到父节点时调用</li><li>update 被绑定元素所在模版更新时调用，不论绑定值是否变化都调用</li><li>componentUpdated 被绑定元素所在模版在完成一次更新周期时调用</li><li>unbind 元素解绑时调用，只调用一次</li></ul><a id="more"></a><h3 id="每个钩子函数都有参数："><a href="#每个钩子函数都有参数：" class="headerlink" title="每个钩子函数都有参数："></a>每个钩子函数都有参数：</h3><ul><li>el: 指令绑定的element,用来操作dom</li><li>binging 一个对象，包含以下属性<ul><li>name: 指令名，不包含v-前缀</li><li>value: 指令的绑定值，例如 v-my-directive=叮+ l”， value的值是，2</li><li>oldValue: 指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用.无论value 值是否改变都可用。</li><li>expression: 绑定值的字符串形式。例如v-my-directive=”1+ 1”，expression的值是”1+I”.</li><li>arg： 指令的arguments, 例如 v-my-directive:foo, arg 的值是 foo</li><li>modifiers: 一个包含修饰符的对象 。 例如 v-my-directive.foo.bar，修饰符对象 modifiers的值是{ foo: true, bar: true }</li></ul></li><li>vnode</li><li>oldVnode: 上一个虚拟节点仅在 update 和 componentUpdated 钩子中可用 。 </li></ul><h4 id="clickoutsize指令的实现"><a href="#clickoutsize指令的实现" class="headerlink" title="clickoutsize指令的实现"></a>clickoutsize指令的实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(&apos;clickoutside&apos;, &#123;</span><br><span class="line">  bind: function (el, binding) &#123;</span><br><span class="line">    function documentHandler (e) &#123;</span><br><span class="line">      if (binding.arg === &apos;esc&apos; &amp;&amp; e.keyCode === 27) &#123;</span><br><span class="line">        &lt;!-- v-clickoutside的value 是一个函数，这里相当于执行绑定的函数 --&gt;</span><br><span class="line">        binding.value(e)</span><br><span class="line">      &#125;</span><br><span class="line">      &lt;!-- 如果点击的元素是在绑定了v-clickoutside指令元素的内容，则忽略 --&gt;</span><br><span class="line">      if (el.contains(e.target)) &#123;</span><br><span class="line">        return false</span><br><span class="line">      &#125;</span><br><span class="line">      if (binding.expression) &#123;</span><br><span class="line">        binding.value(e)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;!-- 在元素添加一个元素用来存绑定的函数，是为了unbind的时候能够找到这个函数 --&gt;</span><br><span class="line">    el.__vueClickOutside__ = documentHandler</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 在全局添加一些事件 --&gt;</span><br><span class="line">    window.addEventListener(&apos;keydown&apos;, documentHandler)</span><br><span class="line">    document.addEventListener(&apos;click&apos;, documentHandler)</span><br><span class="line">    document.addEventListener(&apos;keydown&apos;, documentHandler)</span><br><span class="line">  &#125;,</span><br><span class="line">  unbind: function (el) &#123;</span><br><span class="line">    document.removeEventListener(&apos;click&apos;, el.__vueClickOutside__)</span><br><span class="line">    delete el.__vueClickOutside__</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;vue-directive-的几个钩子函数&quot;&gt;&lt;a href=&quot;#vue-directive-的几个钩子函数&quot; class=&quot;headerlink&quot; title=&quot;vue-directive 的几个钩子函数&quot;&gt;&lt;/a&gt;vue-directive 的几个钩子函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;bind  指令第一次被绑定到元素时调用，只调用一次&lt;/li&gt;
&lt;li&gt;inserted 被绑定元素插入到父节点时调用&lt;/li&gt;
&lt;li&gt;update 被绑定元素所在模版更新时调用，不论绑定值是否变化都调用&lt;/li&gt;
&lt;li&gt;componentUpdated 被绑定元素所在模版在完成一次更新周期时调用&lt;/li&gt;
&lt;li&gt;unbind 元素解绑时调用，只调用一次&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yongchao.tech:8080/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>对于echarts图表随着浏览器窗口resize的优化</title>
    <link href="http://yongchao.tech:8080/2019/03/05/%E5%AF%B9%E4%BA%8Eecharts%E5%9B%BE%E8%A1%A8%E9%9A%8F%E7%9D%80%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AA%97%E5%8F%A3resize%E7%9A%84%E4%BC%98%E5%8C%96/"/>
    <id>http://yongchao.tech:8080/2019/03/05/对于echarts图表随着浏览器窗口resize的优化/</id>
    <published>2019-03-04T19:07:32.000Z</published>
    <updated>2019-03-21T06:30:53.419Z</updated>
    
    <content type="html"><![CDATA[<p>说明： 有时候项目中会显示一些图表，而且width可能并不是固定的（可能100%），那么当浏览器窗口变化的时候，图表的大小应该跟随着变大或变小，称之为resize</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 用来处理每一个有图表的页面添加resize , 离开时移除resize函数</span><br><span class="line"> */</span><br><span class="line">import echarts from &apos;echarts&apos;</span><br><span class="line">import _ from &apos;lodash&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      doms: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    chartResize () &#123;</span><br><span class="line">      return _.throttle(() =&gt; &#123;</span><br><span class="line">        return this.doms.forEach(dom =&gt; &#123;</span><br><span class="line">          dom &amp;&amp; dom.resize()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;, 400)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    initChart () &#123;</span><br><span class="line">      this.doms.forEach(dom =&gt; &#123;</span><br><span class="line">        dom &amp;&amp; echarts.init(dom)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    console.log(&apos;mixins mounted&apos;)</span><br><span class="line">    this.doms = [this.$refs[&apos;charts&apos;]]</span><br><span class="line">    this.initChart()</span><br><span class="line">    window.addEventListener(&apos;resize&apos;, this.chartResize)</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed () &#123;</span><br><span class="line">    console.log(&apos;mixins destroyed&apos;)</span><br><span class="line">    window.removeEventListener(&apos;resize&apos;, this.chartResize)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps: 使用的时候在需要图表的页面引入这个mixins</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说明： 有时候项目中会显示一些图表，而且width可能并不是固定的（可能100%），那么当浏览器窗口变化的时候，图表的大小应该跟随着变大或变小，称之为resize&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yongchao.tech:8080/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>覆盖ui框架css原生样式</title>
    <link href="http://yongchao.tech:8080/2019/03/05/%E8%A6%86%E7%9B%96ui%E6%A1%86%E6%9E%B6css%E5%8E%9F%E7%94%9F%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yongchao.tech:8080/2019/03/05/覆盖ui框架css原生样式/</id>
    <published>2019-03-04T19:03:48.000Z</published>
    <updated>2019-03-21T06:30:53.419Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>加scoped</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">/deep/.rootName .className&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">or </span><br><span class="line"></span><br><span class="line">.rootName &gt;&gt;&gt; .className&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>不加scoped<br>原理：在组件中添加了父css类, 在修改的样式作用域限定为父css类，减小css的影响范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.rootName .className&#123;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;加scoped&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yongchao.tech:8080/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-intro使用方法及注意点</title>
    <link href="http://yongchao.tech:8080/2019/03/05/vue-intro%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%8F%8A%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
    <id>http://yongchao.tech:8080/2019/03/05/vue-intro使用方法及注意点/</id>
    <published>2019-03-04T19:01:39.000Z</published>
    <updated>2019-03-21T06:30:53.419Z</updated>
    
    <content type="html"><![CDATA[<p>1、使用时必须引入intro.js<br>2、let intro=Intro.intro()<br>3、intro.setOptions({}).start().oncomplete().onskip(function)<br>4、intro这个插件只能提示一些静态的页面上已经有的一些元素，异步的或者是后来动态显示的元素无法加上提示.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、使用时必须引入intro.js&lt;br&gt;2、let intro=Intro.intro()&lt;br&gt;3、intro.setOptions({}).start().oncomplete().onskip(function)&lt;br&gt;4、intro这个插件只能提示一些静态的页面上
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yongchao.tech:8080/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue中定时器问题</title>
    <link href="http://yongchao.tech:8080/2019/03/05/vue%E4%B8%AD%E5%AE%9A%E6%97%B6%E5%99%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://yongchao.tech:8080/2019/03/05/vue中定时器问题/</id>
    <published>2019-03-04T18:58:04.000Z</published>
    <updated>2019-03-21T06:30:53.419Z</updated>
    
    <content type="html"><![CDATA[<p>Vue中使用了定时器后在关闭页面后必须手动清理</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">方案一</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  tiemr: null  </span><br><span class="line">&#125;,</span><br><span class="line">method: &#123;</span><br><span class="line">  method1 () &#123;</span><br><span class="line">    this.timer = setInterval(()=&gt; &#123;</span><br><span class="line">      // logic </span><br><span class="line">    &#125;, interval)</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">    clearInterval(this.timer)</span><br><span class="line">    this.timer = null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方案二：</span><br><span class="line"></span><br><span class="line">通过$once来监听定时器，在beforeDestroy中可以被清除</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">优点：这两段代码写在一起，不同特意定义一个data.timer</span><br><span class="line">缺点：适用于只有离开页面关闭定时器的情况，</span><br><span class="line">const timer = setInterval(()=&gt;&#123;</span><br><span class="line">    // logic</span><br><span class="line">&#125;, interval)</span><br><span class="line"></span><br><span class="line">this.$once(&apos;hook:beforeDestroy&apos;, ()=&gt;&#123;</span><br><span class="line">    clearInterval(timer)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ps: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">template&gt;</span><br><span class="line">  &lt;div class=&quot;test&quot;&gt;</span><br><span class="line">    &lt;Button @click=&quot;addInterval()&quot;&gt;add&lt;/Button&gt;</span><br><span class="line">    &lt;h1&gt;测试&lt;/h1&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addInterval () &#123;</span><br><span class="line">      const timer = setInterval(() =&gt; &#123;</span><br><span class="line">        console.log(&apos;aaa&apos;)</span><br><span class="line">      &#125;, 100)</span><br><span class="line">      this.$once(&apos;hook:beforeDestroy&apos;, () =&gt; &#123;</span><br><span class="line">        clearInterval(timer)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue中使用了定时器后在关闭页面后必须手动清理&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yongchao.tech:8080/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>js的灵活</title>
    <link href="http://yongchao.tech:8080/2019/03/04/js%E7%9A%84%E7%81%B5%E6%B4%BB/"/>
    <id>http://yongchao.tech:8080/2019/03/04/js的灵活/</id>
    <published>2019-03-04T14:53:55.000Z</published>
    <updated>2019-03-21T06:30:53.415Z</updated>
    
    <content type="html"><![CDATA[<h3 id="js是超级灵活的语言"><a href="#js是超级灵活的语言" class="headerlink" title="js是超级灵活的语言"></a>js是超级灵活的语言</h3><h4 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var checkObj = function () &#123;&#125;</span><br><span class="line">    checkObj.prototype.checkName = function()&#123;</span><br><span class="line">    console.log(&apos;checkName&apos;)</span><br><span class="line">&#125;</span><br><span class="line">checkObj.prototype.checkEmail = function()&#123;</span><br><span class="line">    console.log(&apos;checkEmail&apos;)</span><br><span class="line">&#125;</span><br><span class="line">checkObj.prototype.checkPassword = function()&#123;</span><br><span class="line">    console.log(&apos;checkPassword&apos;)</span><br><span class="line">&#125;</span><br><span class="line">var a = new checkObj()</span><br><span class="line">a.checkName()</span><br><span class="line">a.checkEmail()</span><br><span class="line">a.checkPassword()</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var checkObj = function () &#123;&#125;</span><br><span class="line">checkObj.prototype = &#123;</span><br><span class="line">    checkName:function()&#123;</span><br><span class="line">        console.log(&apos;checkName&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    checkEmail: function()&#123;</span><br><span class="line">        console.log(&apos;checkEmail&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    checkPassword: function()&#123;</span><br><span class="line">        console.log(&apos;checkPassword&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var a = new checkObj()</span><br><span class="line">a.checkName()</span><br><span class="line">a.checkEmail()</span><br><span class="line">a.checkPassword()</span><br></pre></td></tr></table></figure><h3 id="step3-链式调用"><a href="#step3-链式调用" class="headerlink" title="step3 链式调用"></a>step3 链式调用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var checkObj = function () &#123;&#125;</span><br><span class="line">    checkObj.prototype = &#123;</span><br><span class="line">        checkName:function()&#123;</span><br><span class="line">        console.log(&apos;checkName&apos;)</span><br><span class="line">        return this</span><br><span class="line">    &#125;,</span><br><span class="line">    checkEmail: function()&#123;</span><br><span class="line">        console.log(&apos;checkEmail&apos;)</span><br><span class="line">        return this</span><br><span class="line">    &#125;,</span><br><span class="line">    checkPassword: function()&#123;</span><br><span class="line">        console.log(&apos;checkPassword&apos;)</span><br><span class="line">        return this</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var a = new checkObj()</span><br><span class="line">a.checkName().checkEmail().checkPassword()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;js是超级灵活的语言&quot;&gt;&lt;a href=&quot;#js是超级灵活的语言&quot; class=&quot;headerlink&quot; title=&quot;js是超级灵活的语言&quot;&gt;&lt;/a&gt;js是超级灵活的语言&lt;/h3&gt;&lt;h4 id=&quot;step1&quot;&gt;&lt;a href=&quot;#step1&quot; class=&quot;headerlink&quot; title=&quot;step1&quot;&gt;&lt;/a&gt;step1&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var checkObj = function () &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    checkObj.prototype.checkName = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(&amp;apos;checkName&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;checkObj.prototype.checkEmail = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(&amp;apos;checkEmail&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;checkObj.prototype.checkPassword = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(&amp;apos;checkPassword&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var a = new checkObj()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.checkName()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.checkEmail()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.checkPassword()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
